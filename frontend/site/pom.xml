<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.extendedmind</groupId>
    <artifactId>frontend</artifactId>
    <version>0-SNAPSHOT</version>
  </parent>
  <groupId>org.extendedmind.frontend</groupId>
  <artifactId>frontend-site</artifactId>
  <packaging>pom</packaging>
  <name>Extended Mind :: Frontend :: Site</name>
  <description>Extended Mind Frontend Site</description>
  <url>https://github.com/extendedmind/extendedmind</url>
  <inceptionYear>2013</inceptionYear>
  <licenses>
    <license>
      <name>The Apache Software License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>
  <scm>
    <connection>scm:git:git@github.com:extendedmind/extendedmind.git</connection>
    <developerConnection>scm:git:git@github.com:extendedmind/extendedmind.git</developerConnection>
    <url>git@github.com:extendedmind/extendedmind.git</url>
  </scm>
  <developers>
    <developer>
      <id>ttiurani</id>
      <name>Timo Tiuraniemi</name>
      <email>timo.tiuraniemi@iki.fi</email>
    </developer>
  </developers>
  <dependencies>
    <dependency>
      <groupId>org.extendedmind.frontend</groupId>
      <artifactId>frontend-app</artifactId>
      <type>war</type>
    </dependency>
  </dependencies>
  <properties>
    <root.project.basedir>${project.parent.parent.basedir}</root.project.basedir>
    <nginxSiteHost>site</nginxSiteHost>
    <extraNginxConf/>
  </properties>
  <build>
    <plugins>
      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>install node and npm</id>
            <goals>
              <goal>install-node-and-npm</goal>
            </goals>
            <configuration>
              <nodeVersion>${node.version}</nodeVersion>
            </configuration>
          </execution>
          <execution>
            <id>npm-install</id>
            <goals>
              <goal>npm</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <arguments>install</arguments>
            </configuration>
          </execution>
          <execution>
            <id>npm-prune-to-production</id>
            <goals>
              <goal>npm</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <arguments>prune --production</arguments>
            </configuration>
          </execution>
          <execution>
            <id>npm-back-to-developement</id>
            <goals>
              <goal>npm</goal>
            </goals>
            <phase>pre-integration-test</phase>
            <configuration>
              <arguments>install</arguments>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <workingDirectory>src</workingDirectory>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-to-www</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.extendedmind.frontend</groupId>
                  <artifactId>frontend-app</artifactId>
                  <type>war</type>
                  <overWrite>true</overWrite>
                  <outputDirectory>${project.build.directory}/unpacked-app</outputDirectory>
                  <includes>static/${project.version}/**,static/*.html</includes>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-helm-templates</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/helm</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${basedir}/helm</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-docker-templates</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.basedir}/docker</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${basedir}/templates</directory>
                  <includes>
                    <include>*.conf</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-node-templates</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.basedir}/src</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${basedir}/templates</directory>
                  <includes>
                    <include>*.json</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-static</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.basedir}/src/public/static/fonts/${project.version}</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.build.directory}/unpacked-app/static/${project.version}/fonts</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <configuration>
          <sourceDirectory>docker</sourceDirectory>
          <images>
           <image>
              <name>quay.io/extendedmind/site-static</name>
              <alias>site-static</alias>
              <build>
                <from>quay.io/extendedmind/data-volume:dv-3.5-1</from>
                <maintainer>timo.tiuraniemi@iki.fi</maintainer>
                <tags>
                  <tag>latest</tag>
                  <tag>${project.version}</tag>
                </tags>
                <assembly>
                  <mode>dir</mode>
                  <basedir>/app/site-static</basedir>
                  <descriptor>site-static-assembly.xml</descriptor>
                </assembly>
                <entryPoint>
                  <exec>
                    <arg>/bin/cp</arg>
                    <arg>-R</arg>
                    <arg>/app/site-static/.</arg>
                    <arg>/app/site-public/assets</arg>
                  </exec>
                </entryPoint>
              </build>
            </image>
            <image>
              <name>quay.io/extendedmind/site</name>
              <alias>site</alias>
              <build>
                <from>quay.io/extendedmind/node:node-7.10.0-1</from>
                <maintainer>timo.tiuraniemi@iki.fi</maintainer>
                <tags>
                  <tag>latest</tag>
                  <tag>${project.version}</tag>
                </tags>
                <ports>
                  <port>3000</port>
                </ports>
                <volumes>
                  <volume>/app/site-generated</volume>
                  <volume>/etc/nginx/sites-enabled/site</volume>
                </volumes>
                <assembly>
                  <mode>dir</mode>
                  <basedir>/</basedir>
                  <descriptor>site-assembly.xml</descriptor>
                </assembly>
                <workdir>/app/site</workdir>
                <entryPoint>
                  <exec>
                    <arg>pm2-docker</arg>
                    <arg>site-pm2.json</arg>
                  </exec>
                </entryPoint>
              </build>
            </image>
            <image>
              <name>quay.io/extendedmind/etc-init</name>
              <alias>etc-init</alias>
              <build>
                <from>quay.io/extendedmind/tar-curl-rsync:tcr-4</from>
                <maintainer>timo.tiuraniemi@iki.fi</maintainer>
                <tags>
                  <tag>latest</tag>
                  <tag>${project.version}</tag>
                </tags>
                <assembly>
                  <mode>dir</mode>
                  <basedir>/</basedir>
                  <descriptor>etc-init-assembly.xml</descriptor>
                </assembly>
                <workdir>/app/etc-init</workdir>
                <entryPoint>
                  <exec>
                    <arg>/app/etc-init/etc-init.sh</arg>
                  </exec>
                </entryPoint>
              </build>
            </image>
            <image>
              <name>quay.io/extendedmind/sync-folder</name>
              <alias>sync-folder</alias>
              <build>
                <from>quay.io/extendedmind/cloudsdk:cloudsdk-155.0.0-3</from>
                <maintainer>timo.tiuraniemi@iki.fi</maintainer>
                <tags>
                  <tag>latest</tag>
                  <tag>${project.version}</tag>
                </tags>
                <assembly>
                  <!-- FIXME: Once CronJobs go out of beta switch back to this:
                  <user>java:java:java</user>
                  -->
                  <user>root:root:root</user>
                  <mode>dir</mode>
                  <basedir>/app/sync-folder</basedir>
                  <descriptor>sync-folder-assembly.xml</descriptor>
                </assembly>
                <workdir>/app</workdir>
                <entryPoint>
                  <exec>
                    <arg>/app/sync-folder/sync-folder.sh</arg>
                  </exec>
                </entryPoint>
              </build>
            </image>
         </images>
        </configuration>
        <executions>
          <execution>
            <id>build</id>
            <phase>package</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <fileset>
              <directory>${basedir}/docker</directory>
              <includes>
                <include>nginx.extendedmind.conf</include>
              </includes>
            </fileset>
            <fileset>
              <directory>${basedir}/src</directory>
              <includes>
                <include>package.json</include>
                <include>config-devel.json</include>
              </includes>
            </fileset>
            <fileset>
              <directory>${basedir}/src/etc</directory>
            </fileset>
            <fileset>
              <directory>${basedir}/src/node</directory>
            </fileset>
            <fileset>
              <directory>${basedir}/src/node_modules</directory>
            </fileset>
            <fileset>
              <directory>${basedir}/src/typings</directory>
            </fileset>
            <fileset>
              <directory>${basedir}/src/public</directory>
            </fileset>
            <fileset>
              <directory>${basedir}/src/dist</directory>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <appendAssemblyId>true</appendAssemblyId>
          <finalName>${project.artifactId}-${project.version}</finalName>
          <descriptors>
            <descriptor>sources-assembly.xml</descriptor>
            <descriptor>helm-assembly.xml</descriptor>
          </descriptors>
        </configuration>
        <executions>
          <execution>
            <id>make-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
