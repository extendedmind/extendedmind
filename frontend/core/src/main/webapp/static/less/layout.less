@import "foundation.less";

/*
<h1 class="main-heading">Layout</h1>

TODO: em grid structure explained in plain English (when new grid structure decided!)
*/


/*
**************************************************************************
# Columns
*/

@one-column-grid-width: 568px; // iPhone 5 landscape is still one column
@two-column-grid-width: 720px;
@two-column-grid-main-width: 66.66%;
@two-column-grid-aside-width: 33.33%;

// iPad specifies the maximum width and height of the content area
@maximum-width: 1025px;
@maximum-height: 1025px;
@maximum-landscape-height: 769px;
@fixed-page-height: 500px;

@container-banner-height: 200px;


/*
`.center-horizontally` centers the container by making the browser to calculate left and right margins automatically.

```markup
<div class="center-horizontally" style="background:gray;max-width:100px;">&nbsp;</div>
```
*/
.center-horizontally {
  margin-left: auto;
  margin-right: auto;
}

//////// NEW START ////////////////////////

/*
**************************************************************************
# LEVEL 1: Primary Containers (main, editor, menu)
*/

/*
`.container-main` sets the vertical positioning of the main
  content area. When the screen size is bigger than a tablet, the main
  container will be vertically centered.
*/
.container-main {
  .center-horizontally;
  max-height: @maximum-height;
}

.container-menu {

}

.container-editor {

}

@media (min-height: @maximum-landscape-height) {
  .container-main {
    position: relative;
    min-height: @maximum-landscape-height;
    max-height: @maximum-landscape-height;
    margin-top: -@maximum-landscape-height / 2;
    top: 50%;
  }
}

/*
**************************************************************************
# LEVEL 2: Secondary Containers (content, banner, toolbar, titlebar)
*/

/*
`.container-content` specifies the vertical overflow.
*/
.container-content {
  height: 100%;
  overflow-y: auto;
}

.container-banner {
  text-align: center;
  height: @container-banner-height;
  display: table;
  [class^="icon-"], [class*=" icon-"] {
    display: table-cell;
    vertical-align: middle;
  }
}

.container-toolbar {
  // menu     title    omnibar
}

.container-titlebar {
  // < save
  //    title
  //  inbox task note list
}


// Align all secondary containers horizontally

.container-content,
.container-banner,
.container-toolbar,
.container-titlebar {
  .center-horizontally;
  max-width: @maximum-width;
}


/*
**************************************************************************
# LEVEL 3: row
*/

/*
`.row` is uses horizontal alignment. It specifies the left and right
margin.
*/
.row {
  width: 100%;
  padding-left: @horizontal-grid;
  padding-right: @horizontal-grid;
}

/*
**************************************************************************
# LEVEL 4: groups
*/

/*
Class `.group-btn` groups automatically button elements horizontally. Works
for 1, 2, 3, 4, 7 and 9 buttons.

```markup
<div class="group-btn" style="width: 100%;">
  <button style="background:gray;">&nbsp;</button>
  <button style="background:red;">&nbsp;</button>
  <button style="background:gray;">&nbsp;</button>
  <button style="background:red;">&nbsp;</button>
  <button style="background:gray;">&nbsp;</button>
  <button style="background:red;">&nbsp;</button>
  <button style="background:gray;">&nbsp;</button>
  <button style="background:red;">&nbsp;</button>
  <button style="background:gray;">&nbsp;</button>
</div>
<div class="group-btn" style="width: 100%;">
  <button style="background:gray;">&nbsp;</button>
  <button style="background:red;">&nbsp;</button>
  <button style="background:gray;">&nbsp;</button>
  <button style="background:red;">&nbsp;</button>
  <button style="background:gray;">&nbsp;</button>
  <button style="background:red;">&nbsp;</button>
  <button style="background:gray;">&nbsp;</button>
</div>
<div class="group-btn" style="width: 100%;">
  <button style="background:gray;">&nbsp;</button>
  <button style="background:red;">&nbsp;</button>
  <button style="background:gray;">&nbsp;</button>
  <button style="background:red;">&nbsp;</button>
</div>
<div class="group-btn" style="width: 100%;">
  <button style="background:gray;">&nbsp;</button>
  <button style="background:red;">&nbsp;</button>
  <button style="background:gray;">&nbsp;</button>
</div>
<div class="group-btn" style="width: 100%;">
  <button style="background:gray;">&nbsp;</button>
  <button style="background:red;">&nbsp;</button>
</div>
<div class="group-btn" style="width: 100%;">
  <button style="background:gray;">&nbsp;</button>
</div>
```
*/
.group-btn {
  button:first-child:nth-last-child(1) {
    width: 100%;
  }
  button:first-child:nth-last-child(2),
  button:first-child:nth-last-child(2) ~ button {
    width: 50%;
    float: left;
  }
  button:first-child:nth-last-child(3),
  button:first-child:nth-last-child(3) ~ button {
    width: 33.333%;
    float: left;
  }
  button:first-child:nth-last-child(4),
  button:first-child:nth-last-child(4) ~ button {
    width: 25%;
    float: left;
  }
  button:first-child:nth-last-child(7),
  button:first-child:nth-last-child(7) ~ button {
    width: 14.2857%;
    float: left;
  }
  button:first-child:nth-last-child(9),
  button:first-child:nth-last-child(9) ~ button {
    width: 11.111%;
    float: left;
  }
}

/*
Use `.group-instruction` to create an instruction block in the middle of a section.
*/
.group-instruction {
  color: @instruction;
  display: block;
  text-align: center;
  line-height: 19px;

  // If there are more than one paragraph, create padding between them
  p:not(:first-child) {
    padding-top: @vertical-grid;
  }
}
.group-instruction ~ .group-btn {
  padding-top: @vertical-grid;
}

/*
Use `.group-mixed` to create horizontal collections of different elements.
*/
.group-mixed {

}

/*
`.group-error` groups together multiple error messages.
*/
.group-error {
  line-height: @vertical-grid-half;
}

.group-navigation {
  // TODO: Footer navigation here
}


//////// NEW END ////////////////////////

/*
Use `.left-of-two` and `.right-of-two` to divide the horizontal space in two sections, separated by a white border.

```markup
<div class="left-of-two" style="background:gray;">&nbsp;</div>
<div class="right-of-two" style="background:gray;">&nbsp;</div>
```
*/
.left-of-two {
  float: left;
  width: 50%;
  border-right: 1px solid white;
}
.right-of-two {
  float: left;
  width: 50%;
}

/*
Similarly, use the following to divide to three sections:

* `left-of-three`
* `center-of-three`
* `right-of-three`

```markup
<div class="left-of-three" style="background:gray;">&nbsp;</div>
<div class="center-of-three" style="background:gray;">&nbsp;</div>
<div class="right-of-three" style="background:gray;">&nbsp;</div>
```
*/
.left-of-three {
  float: left;
  width: 33%;
  border-right: 1px solid white;
}
.center-of-three {
  float: left;
  width: 34%;
  border-right: 1px solid white;
}
.right-of-three {
  float: left;
  width: 33%;
}

/*
And to four sections:

* `left-of-four`
* `center-of-four`
* `center-of-four`
* `right-of-four`

```markup
<div class="left-of-four" style="background:gray;">&nbsp;</div>
<div class="center-of-four" style="background:gray;">&nbsp;</div>
<div class="center-of-four" style="background:gray;">&nbsp;</div>
<div class="right-of-four" style="background:gray;">&nbsp;</div>
```
*/
.left-of-four {
  float: left;
  width: 25%;
  border-right: 1px solid white;
}
.center-of-four {
  float: left;
  width: 25%;
  border-right: 1px solid white;
}
.right-of-four {
  float: left;
  width: 25%;
}

/*
`.horizontally-justified` justifies text horizontally.

```markup
<div class="horizontally-justified">Extended Mind is not just a nice brand name for a task manager or another note taking app. We are very serious about the fact that certain mental operations such as workflow management and declarative memory can be externalized. This will change the way you think.</div>
```
*/
.horizontally-justified {
  text-align: justify;
  * {
    display: inline;
  }
  .justified-element {
    display: inline-block;
  }
  #stretch {
    width: 100%;
    display: inline-block;
    font-size: 0;
    line-height: 0;
  }
}

.list-last {
  margin-bottom: @vertical-grid-half;
}


/*
**************************************************************************
# Grid
*/

div#root {
  line-height: @vertical-grid;
  max-height: @maximum-height;
  .center-horizontally;
  position: relative;

  .one-column-grid, .two-column-grid, .column {
    min-height: inherit;
    min-width: inherit;
  }
  .column {
    position: relative;
    width: 100%;
  }
}

.one-column-grid {
  padding-left: @horizontal-grid;
  padding-right: @horizontal-grid;
  max-width: @one-column-grid-width;
  .center-horizontally;
}

.two-column-grid {
  max-width: @two-column-grid-width;
  .center-horizontally;
  padding-left: @horizontal-grid;
  aside.column, div.column {
    width: auto;
    padding-right: @horizontal-grid;
  }
  aside.column {
    max-width: @two-column-grid-aside-width;
  }
  div.column {
    max-width: @two-column-grid-main-width;
  }
}


/*
**************************************************************************
# Header
*/

header {
  z-index: 1;
  top: 0px;
  left: 0px;
  overflow: hidden;
  width: 100%;
  * {
    vertical-align: middle;
  }
}

.static-page-header {
  height: @page-header-height;
  position: relative;
  nav {
    max-width: @one-column-grid-width;
    margin-left: auto;
    margin-right: auto;
    .active-item-container {
      width: 23%;
      height: @page-header-height;
      float: left;
    }
    .heading-container {
      // NOTE: this width percentage is used in HeadingController.js!
      width: 54%;
      height: @page-header-height;
      float: left;
      display: table;
      .heading {
        display: table-cell;
        vertical-align: middle;
        text-align: center;
      }
    }
    .omni-button-container {
      width: 23%;
      height: @page-header-height;
      float: right;
      text-align: right;
    }
  }
}

.heading-header {
  position: relative;
  text-align: center;
  min-height: @heading-header-height;
  h3 {
    padding-top: 18px;
  }
}


/*
**************************************************************************
# Content
*/

.page-content-container {
  height: 100%;
  padding-top: @page-header-height + 12px;
  padding-bottom: @footer-height;

  .inner-page-content-container {
    height: inherit;
    position: relative;
    overflow-y: auto;
    display: block;
  }
  .inner-slide-content-container {
    height: inherit;
    section {
      height: inherit;
      overflow-y: auto;
    }
  }
  // TODO: To be removed, when Accordion gone
  .accordion-wrapper {
    // NOTE: Due to mysterous iphone laggy accordion, height,
    // nor probably anything else can not be set here.
    // Don't add anything here if you don't know how to test
    // the laggy accordion bug.
    // height: inherit;
  }
}

.simple-content-container {
  height: inherit;
  padding-bottom: @heading-header-height + @vertical-grid-half;
  overflow-y: auto;
}

.single-page-content-container {
  overflow-y: hidden;
  .scroll-container {
    height: inherit;
    overflow-y: auto;
  }
}


/*
**************************************************************************
# Swiper

TODO: Do we want an example of a swiper in the styleguide?
*/

.swiper-container, .swiper-wrapper, .swiper-slide {
  height: inherit !important;
  width: 100%;
}

.swiper-container.main-slides {
  margin-top: -@page-header-height;
  margin-bottom: -@footer-height;
}

.single-page-container {
  margin-bottom: -@footer-height;
}

.hide-footer .swiper-container.main-slides, .hide-footer .single-page-container {
  margin-bottom: 0;
}

.hide-footer .page-content-container {
  padding-bottom: @vertical-grid-half;
}

// NO SWIPER
.no-slides-container {
  .single-page-container {
    height: 100%;
    .single-page {
      margin-top: -@page-header-height;
      height: inherit;
      position: relative;
    }
  }
}


/*
**************************************************************************
# Responsive main container

When the screen size is bigger than a tablet,
the main container will be horizontally and vertically centered.

*/
@media (min-height: @maximum-landscape-height) {
  body {
    .no-slides-container {
      position: relative;
      min-height: @maximum-landscape-height;
      max-height: @maximum-landscape-height;
      margin-top: -@maximum-landscape-height / 2;
      top: 50%;
    }
    .slides-container {
      position: inherit;
      top: 50%;
      min-height: @maximum-landscape-height;
      max-height: @maximum-landscape-height;
      margin-top: -@maximum-landscape-height / 2;
    }
    .omnibar-drawer {
      margin-top: -@maximum-landscape-height / 2;
      top: 50%;
    }
  }
}

// Pages with fixed content need a smaller height
@media (min-height: @fixed-page-height) {
  section.fixed-height {
    min-height: @fixed-page-height !important;
    max-height: @fixed-page-height !important;
  }
}

// For smaller screens, aside is hidden, and we revert to single column width

// FIXME: FORCING ONE COLUMN TO EVERYONE
//@media (max-width: @maximum-width) {
  .two-column-grid, .two-column-grid div.column, footer, .two-column-grid header {
    max-width: @one-column-grid-width;
  }
  aside {
    display: none;
  }


/*
**************************************************************************
# Login, Signup and Launch

TODO: Explain verbally, when new grid done
*/

@login-content-height: @vertical-grid*5.1;

section#login, section#signup, section#launch, section#waiting, section#forgot, section#verify {
  .column {
    overflow-y: auto;
    .banner {
      padding-bottom: @vertical-grid / 10;
      span {
        width: 200px;
        display: block;
        text-align: center;
        .center-horizontally;
      }
      // Make content a "sticky footer"
      min-height: 100%;
      margin-bottom: -@login-content-height;
      padding-top: @vertical-grid * 1.5;
    }
    .banner:after {
      content: "";
      display: block;
      height: @login-content-height;
    }
    .content {
      height: @login-content-height;
      .button-container {
        padding-top: @vertical-grid / 2;
        padding-bottom: @vertical-grid / 2;
      }
    }
  }
  .icon-logo-with-text {
    padding-bottom: 25px;
  }
}

section#waiting {
  .column {
    .banner {
      margin-bottom: -@vertical-grid * 5.5;
    }
    .content {
      .instruction-text {
        h1 {
          line-height: 200%;
        }
        padding-bottom: @vertical-grid / 2;
      }
      #input-coupon {
        text-align: center;
      }
    }
  }
  .waiting-coupon {
    .banner {
      margin-bottom: -@vertical-grid * 6.5;
    }
  }
}

section#launch {
  .column {
    .content {
      div#email {
        padding-bottom: @vertical-grid;
      }
    }
  }
}

section#forgot, section#verify {
  .column {
    .banner {
      margin-bottom: -@vertical-grid * 7.5;
    }
    .content {
      .instruction-text {
        p {
          height: @vertical-grid / 2;
          vertical-align: middle;
        }
      }
    }
    #instructions-success {
      .instruction-text {
        padding-bottom: @vertical-grid;
      }
    }
  }
}


/*
**************************************************************************
# About
*/

// TODO: To be refactored, maybe .multiline-text could be created and universally used?
#about-help {
  line-height: @vertical-grid-half;
}


/*
**************************************************************************
# Simple content
*/

.simple-content {
  padding-bottom: @vertical-grid;
}

.simple-content:last-child {
  padding-bottom: 0;
}

.tasks-notes-container {
  padding-top: @vertical-grid-half;
}


/*
**************************************************************************
# Errors
*/

#errorMessage {
  h3 {
    text-align: center;
    padding-bottom: @vertical-grid;
  }
}

.add-element {
  // Add @vertical grid to make room for 'add [item]...' input
  padding-bottom: @vertical-grid-half;
}
