@import "foundation.less";
@import "inputs.less";

/*
<h1 class="main-heading">Layout</h1>

TODO: em grid structure explained in plain English (when new grid structure decided!)
*/
@height-column-max: 1025px;
@width-column-max: 768px; // iPhone 5 landscape is still one column

@width-menu: 260px;

/*
**************************************************************************
# LEVEL 1: Root
*/

.container-root {
  width: 100%;
  height: 100%;
}

// 1. Set width and height for absolutely positioned (grand)children.
// 2. Must set position to relative for correct width during transitions. Otherwise page would scroll horizontally.
.container-root--inner {
  height: 100%; // [1]
  width: 100%;  // [1]
  position: relative; // [2]
}

/*
**************************************************************************
# LEVEL 2: Optional Intermediate Containers (main, drawer-aisle)
*/

// 1. Inherit width and height for absolutely positioned (grand)children.
.container-main,
.container-drawer-aisle, .container-drawer-aisle--inner {
  width: inherit;   // [1]
  height: inherit;  // [1]
}

// 1. Hide - but do not collapse - menu when editor is open.
// 2. Hide editor when it is not open.
.container-main {
  &.editor-show .container-menu {
    visibility: hidden; // [1]
  }
  &:not(.editor-show) .container-editor {
    display: none;  // [2]
  }
}

// 1. Minimize paint when editor is open and .container-master and .container-menu are stacked beneath.
//    At least absolutely positioned elements inside these classes would repaint and slow down swiping in
//    editor swiper. NOTE: "overflow: hidden" causes flicker in vertical swiper (focus/tasks), but without
//    it, performance is degraded noticably
.editor-visible {
  .container-master, .container-master *,
  .container-menu, .container-menu * {
    pointer-events: none; // [1]
    overflow: hidden;     // [1]
  }
}

// 1. .container-drawer-aisle must have a background in order to hide .container-menu and .container-editor.
.container-drawer-aisle {
  position: absolute;       // [1]
  background-color: white;  // [1]
}

/*
**************************************************************************
# LEVEL 3: Primary Containers (master, editor, menu, modal)
*/

// 1. Layout for Snap.js. See https://github.com/jakiestfu/Snap.js/#layout
// 2. Inherit height to expand vertically and for (grand)children as well.
.container-menu,
.container-master,
.container-editor {
  position: absolute; // [1]
  height: inherit;    // [2]
}

// 1. Intermediate div needs height to work
.container-editor--inner__outer,
.container-editor--inner {
  height: inherit;    // [1]
}

// 1. Maximum height is set programmatically - set default maximum height here as well for reference.
.container-master,
.container-editor {
  max-height: @height-column-max;  // [1]
}

/*
Menu
*/

@height-menu-footer: @grid-vertical-medium * 2 + @margin-bottom-heading + @padding-vertically-centered;
// 1. Use native-style scrolling in WebKit browsers
.container-menu {
  -webkit-overflow-scrolling: touch;  // [1]
  width: @width-menu;
  overflow-y: auto;
  height: 100%;
  background-color: @color-background-menu;
}

// 1. Sticky footer, margin-bottom is the negative value of the footer's height.
// 2. Set margin-top for first-child of .container-menu to align vertically with toolbar.
// 3. Center vertically.
// 4. Increase click area with padding-bottom.
//    NOTE: Can't be more than 5px because vertical position of .separate depends on this.
.container-menu--top {
  min-height: 100%;
  margin: 0 auto -@height-menu-footer;  // [1]
  .separate {
    // use this to separate link elements from other
    line-height: 84px;
    padding-bottom: 6px;
    span {
      line-height: inherit;
    }
  }
  .link-menu:first-child {
    margin-top: @margin-top-heading;            // [2]
    padding-top: @padding-vertically-centered;  // [3]
    padding-bottom: 5px;                        // [4]
  }
  .link-menu-small {
    line-height: @grid-vertical;
  }
}

.container-menu--bottom, .container-menu--push {
  height: @height-menu-footer;
}

.container-menu--bottom {
  .link-menu {
    line-height: @grid-vertical-medium;
  }
  .link-menu:last-child {
    margin-bottom: @margin-bottom-heading;
    padding-bottom: @padding-vertically-centered;  // [3]
  }
}

// 1. Center vertically. See http://css-tricks.com/centering-css-complete-guide/#vertical-block-known
// 2. Set default max-height
// 3. Set white background to hide stuff below.
.container-modal {
  position: absolute;                   // [1]
  top: 50%;                             // [1]
  -webkit-transform: translateY(-50%);  // [1]
  -moz-transform: translateY(-50%);     // [1]
  -o-transform: translateY(-50%);       // [1]
  -ms-transform: translateY(-50%);      // [1]
  transform: translateY(-50%);          // [1]
  width: 100%;
  .center-horizontally-absolute();
  background-color: white;  // [3]
  .container-content {
    height: auto;
    max-height: 60vh; // [2]
  }
}

@large-screen-width-modal: 350px;
@large-screen-height-modal: 400px;

/*
Vertically center .container-master and .container-editor in large screens
*/
// 1. Set maximum dimensions for modal.
@media (min-height: @height-column-max) {
  .container-master,
  .container-editor {
    margin-top: -@height-column-max / 2;
    top: 50%;
  }
  .container-modal {
    max-height: @large-screen-height-modal; // [1]
  }
}

@media (min-width: @width-column-max) {
  .container-modal {
    max-width: @large-screen-width-modal;   // [1]
  }
}

/*
**************************************************************************
# LEVEL 4: Fluid
*/
// 1. Match with .container-toolbar.
@height-footer: 62px; // [1]
@height-footer-short: @grid-vertical;

// Fluid container height.
//
// Sources:
// http://stackoverflow.com/a/15933376
// http://stackoverflow.com/a/12255692
// http://pixelsvsbytes.com/blog/2011/09/sticky-css-footers-the-flexible-way/
//
// 1. Fixes width calculation with swiper inside. See: http://stackoverflow.com/a/19835024
// 2. Inherit height for display: table.
// 3. Set width for display: table
.container-fluid {
  display: table;
  table-layout: fixed;  /* [1] */
  height: inherit;      /* [2] */
  width: 100%;          /* [3] */
}

// 1. Fluid container height.
// 2. Inherit height because parent uses display: table
// 3. Default bottom padding to make room for footer. NOTE: Override programmatically if footer height is different.
.container-fluid--inner {
  display: table-cell;            // [1]
  height: inherit;                // [1,2]
  padding-bottom: @height-footer; // [3]
}

// 1. Clear padding-bottom for footer from fluid container in editor.
//    Padding-bottom is set programmatically in editor into .content-container.
.container-editor .container-fluid--inner {
  padding-bottom: 0;  // [1]
}

// 3. Modal's bottom padding to make room for footer.
.container-modal .container-fluid--inner,
.container-fluid--inner.small-footer-height {
  padding-bottom: @height-footer-short;
}

// 1. Inherit width from parent. Elements inside swiper would otherwise be as wide as `.swiper-wrapper`.
.swiper-slide .container-content {
  width: inherit; /* [1] */
}

// 1. Make room for outer footer (.container-editor--inner__after).
.container-editor--inner__outer {
  padding-bottom: @height-footer-short; // [1]
}

// 1. Define height.
// 2. Align horizontally.
// 3. Use same position as in .container-editor.
.container-editor--inner__after {
  height: @height-footer-short; // [1]
  background-color: @color-background-btn-active;
  max-width: @width-column-max;     // [2]
  .center-horizontally-absolute();  // [2]
  position: absolute; // [3]
}

// 1. Use same positioning as in swiper to make .container-content scrollable
//    Set left and right properties as well because .container-master, .container-editor and .container-modal
//    are absolutely positioned.
//    Set position to absolute to make .container-content--after visible.
//    See: http://www.smashingmagazine.com/2013/08/09/absolute-horizontal-vertical-centering-css/
.container-editor {
  .swiper-slide .container-content,
  .container-content--after {
    position: absolute; // [1]
    left: 0;            // [1]
    right: 0;           // [1]
  }
}

.container-master .swiper-slide {
  .container-content,
  .container-content--after {
    position: absolute; // [1]
    left: 0;            // [1]
    right: 0;           // [1]
  }
}

.container-modal .container-content--after {
  position: absolute; // [1]
  left: 0;            // [1]
  right: 0;           // [1]
}

// 1. .container-content--after inside swiper is absolutely positioned
//    so it needs to be positioned to the bottom of the content-container.
//    NOTE: Override programmatically if footer height is different.
//          See http://css-tricks.com/snippets/css/sticky-footer/
.container-master .container-content--after {
  bottom: -@height-footer;  // [1]
}

.container-fluid--inner.small-footer-height .container-content--after {
  bottom: -@height-footer-short;
}

// 1. Footer with buttons is shorter.
.container-master .container-content--after.group-btn,
.container-modal .container-content--after.group-btn {
  height: @height-footer-short; // [1]
}

// 1. For inbox.
//    TODO: better comments
.container-master .container-fluid--inner > .container-content--after.group-btn {
  position: absolute; // [1]
  left: 0;            // [1]
  bottom: 0;          // [1]
  right: 0;           // [1]
}

/*
*************************************************************
# Master footer
*/

.container-master .container-content--after .group-symmetrical {
  height: @height-footer;
  line-height: @height-footer;

  // 1. Plus icon element is taller than icon itself and since it's a font, its baseline is somewhere.
  //    Set vertical-align to adjust icon inside element, and set same for sort icon.
  .group-symmetrical--left > .icon-sort,
  .group-symmetrical--middle > a > .icon-plus {
    line-height: @height-footer;
    &:after {
      vertical-align: -5%;      // [1]
    }
  }

  // 1. Align plus icon vertically.
  .group-symmetrical--middle > a > .icon-plus {
    display: block;
  }

  // 1. Set height, and also to ensure icons in .text-navigation-back:before and
  //    .text-navigation-forward:after does not increase height.
  .group-symmetrical--left.link-navigation > .text-navigation-back,
  .group-symmetrical--right.link-navigation > .text-navigation-forward {
    display: block;         // [1]
    height: @height-footer;
  }
}


/*
*************************************************************
# Editor footer
*/

// 1. Set white background to hide stuff below.
// 2. Editor footer is at the bottom.
// 3. Varying height.
.container-content--after.editor-footer {
  background-color: white;  // [1]
  bottom: 0;    // [2]
  height: auto; // [3]
}

/*
* Optional outer element to wrap container-content and container-content--after.
* Needed only for swiper elements
*/
// 1. To get drawer handle to work, height needs to be set
.container-content--outer {
  height: inherit; // [1]
}

// 1. Default height for footer. NOTE: Override programmatically if footer height is different.
.container-content--after {
  height: @height-footer; // [1]
}

// 1. Add padding-bottom to make area scrollable.
.editor-footer .keywords-footer {
  height: 100%;
  -webkit-overflow-scrolling: touch;
  overflow-y: auto;
  padding-bottom: @grid-vertical; // [1]
}

// 1. When expanded only one row, .keywords-footer would have undesired scroll due to padding-bottom.
.editor-footer.expanded-one-row .keywords-footer {
  padding-bottom: 0;  // [1]
}

/*
**************************************************************************
# LEVEL 5: Secondary Containers (content, toolbar, titlebar)
*/

// 1. Align all secondary containers horizontally
// 2. Set maximum width.
.container-content, .container-content--after {
  .center-horizontally;         // [1]
  max-width: @width-column-max; // [2]
}

// < save
//    title
//  inbox task note list
// 1. Fluid container height
.container-titlebar,
.container-toolbar,
.modal-toolbar {
  display: table-row; /* [1] */
}

// 1. Set content inside wrapper and center horizontally with max-width,
//    because .container-toolbar has display: table-row which can not(?) be centered horizontally in CSS.
.container-toolbar--inner,
.container-titlebar--inner {
  max-width: @width-column-max; // [1]
  .center-horizontally;         // [1]
}

/*
`.container-content` specifies the vertical overflow.
*/

// 1. Use native-style scrolling in WebKit browsers
.container-content {
  -webkit-overflow-scrolling: touch;  // [1]
  height: 100%;
  overflow-y: auto;
}

// Override for .container-content
// 1. Exclude padding from height with box-sizing.
.container-content.with-expandable-footer {
  box-sizing: content-box;  // [1]
}

/*
**************************************************************************
# LEVEL 6: row and groups
*/

/*
*************************************************************
# Row
*/

/*
`.row` is uses horizontal alignment. It specifies the left and right
margin.
*/
.row {
  width: 100%;
  padding-left: @grid-horizontal;
  padding-right: @grid-horizontal;
}

// FIXME: rename and replace .row-form
// 1. Center vertically. Supports single line, multiline and clamped text.
// 2. Expand link element.
// 3. Make sure clamped and unclamped span inside a tag has the same height with display: block.
//    NOTE: Height of clamped span may vary depending on font, platform and browser. Tested with iPhone 5 and
//          iOS 8.
//          Use span[clamp="2"] if needed to target clamped span.
.row-vertically-centered {
  .row();
  & > a {
    padding-top: @padding-vertically-centered;    // [1]
    padding-bottom: @padding-vertically-centered; // [1]
    display: block; // [2]
    & > span {
      display: block; // [3]
    }
  }
}

// 1. Apply vertical center directly into container when used as a textarea wrapper.
// 2. Divide horintal padding evenly between container and textarea to improve text editing in touch devices.
.row-vertically-centered.with-textarea {
  padding-top: @padding-vertically-centered;    // [1]
  padding-bottom: @padding-vertically-centered; // [1]
  padding-left: @grid-horizontal / 2;     // [2]
  padding-right: @grid-horizontal / 2;    // [2]
  & > textarea {
    padding-left: @grid-horizontal / 2;   // [2]
    padding-right: @grid-horizontal / 2;  // [2]
  }
}

.row-form {
  .row();
  line-height: @grid-vertical;
}

// 1. Raise first (not hidden) row type element of top row container by the amount of @margin-bottom-heading
//    to align into grid.
.row-top-parent:not(.ng-hide) >:first-child {
  margin-top: -@margin-bottom-heading;  // [1]
}

/*
*************************************************************
# Mixed group
*/

/*
Use `.group-mixed` to create horizontal collections of different elements.

Not compatible with `.row` so we need to apply padding-left and -right inside.

NOTE: Implementation depends on the removing of --left|--right DOM nodes if they have no content
*/

@padding-inner-group-mixed: 10px;

.group-mixed {
  display: block;
}

.group-mixed--left, .group-mixed--middle, .group-mixed--right {
  display: table-cell;
  vertical-align: middle;
}

// 1. Force all child elements not to increase .group-mixed height
.group-mixed--left, .group-mixed--right {
  * {
    display: block; /* [1] */
  }
}

// 1. Increase clicking area
.group-mixed--left {
  padding-right: @padding-inner-group-mixed;

  & > a,
  & > input[type="checkbox"] + label,
  & > div {
    padding-left: @grid-horizontal; /* [1] */
    height: @grid-vertical;         /* [1] */
  }
  & > a,
  & > input[type="checkbox"] + label:before,
  & > span {
    line-height: @grid-vertical;
  }
}

.group-mixed--middle {
  width: 100%;
}

.group-mixed.details {
  .group-mixed--middle {
    line-height: @grid-vertical-small;
  }
}

.group-mixed.height-large {
  margin-top: 10px;
}

// 1. Increase clicking area
.group-mixed--right {
  padding-left: @padding-inner-group-mixed;

  // NOTE: all buttons have height defined
  & > button,
  & > a,
  & > span {
    padding-right: @grid-horizontal;  /* [1] */
  }
  & > a {
    height: @grid-vertical;
    line-height: @grid-vertical;
  }
}

// 1. Set padding-left to default padding for inactive.
//    NOTE: It would be better to use :empty selector but it did not work with AngularJS 1.3.0 on element with
//          ng-if so use .inactive instead.
.group-mixed--right.inactive {
  padding-left: @grid-horizontal; // [1]
}

// 1. .group-mixed--middle can be used directly in <a> elements for increased clicking area.
.group-mixed--middle:first-child {
  padding-left: @grid-horizontal;   /* [1] */
}
.group-mixed--middle:last-child {
  padding-right: @grid-horizontal;  /* [1] */
}

// 1. Expand width and line-height when there are no sibling elements in .group-mixed
.group-mixed--middle:only-child {
  display: block;               /* [1] */
  line-height: @grid-vertical;  /* [1] */
}

// 1. Android hack: 10px padding caused redraw problems on the checkbox while swiping,
//    and no other CSS solution fixed the problem.
//    Something like this: http://stackoverflow.com/a/16174338/2659424
//    might be the only proper solution to the repaint problems with Android's WebKit.
.android .group-mixed--left {
  padding-right: 15px;  /* [1] */
}

@padding-vertically-centered: 11px;
@padding-vertically-centered-small-content: 13px;
@group-mixed--left-vertical-padding: 8px;

// 1. Set vertical-align: baseline so that checkbox and navigation arrow icon is aligned to the first row of
//    text inside .group-mixed--middle.
// 2. Increase click area and align vertically with textarea in .group-mixed---middle
//    Checkbox icon is 28px, .group-mixed default height is 44px, use remaining 16px for padding.
//    NOTE: Checkbox icon height is stored into @size-checkbox.
// 3. Checkbox icon determines height.
// 4. Clear line-height (for multiline text as well).
// 5. Align vertically.
//    textarea is 22px, .group-mixed default height is 44px, use remaining 22px for padding.
//    NOTE: Small textarea is 18px.
// 6. Increase click area by inheriting padding-top and -bottom from .group-mixed--middle.
// 7. Add space between first and last link inside.
// 8. Align search type vertically with first row of search result text inside .group-mixed--middle.
// 9. Increase click area and align vertically with textarea in .group-mixed---middle
//    Star icon wrapper is 24px, .group-mixed default height is 44px, use remaining 20px for padding.
//    NOTE: Star icon height is a combination of @size-icon-star-small and line-height: @grid-vertical-half.
// 10.  Increase click area and clear padding from .group-mixed--left
// 11.  Increase click area of .link-navigation, and clear padding from .group-mixed--right.
// 12.  Use same display value as in parent, but set height and line-height to stick vertically in the middle
//      of first row inside .group-mixed--middle.
// 13.  Nudge .icon-star.large to be horizontally aligned with .icon-trash:
//      (WIDTH_icon-star.large - WIDTH_icon.trash) / 2
.group-mixed.with-checkbox {
  .group-mixed--left, .group-mixed--right {
    vertical-align: baseline;  // [1]
  }
  .group-mixed--left {
    & > input[type="checkbox"] + label {
      padding-top: @group-mixed--left-vertical-padding + 1px;     // [2]
      padding-bottom: @group-mixed--left-vertical-padding - 1px;  // [2]
      padding-right: @padding-inner-group-mixed;  // [10]
      margin-right: -@padding-inner-group-mixed;  // [10]
      &:before {
        line-height: initial; // [4]
      }
    }
  }
  .group-mixed--middle {
    padding-top: @padding-vertically-centered;    // [5]
    padding-bottom: @padding-vertically-centered; // [5]
    & > a {
      display: block;                               // [6]
      padding-top: inherit;    // [6]
      margin-top: -@padding-vertically-centered;    // [6]
      padding-bottom: inherit; // [6]
      margin-bottom: -@padding-vertically-centered; // [6]
      &.link-list-item {
        padding-top: @padding-vertically-centered-small-content;    // [5]
        padding-bottom: @padding-vertically-centered-small-content; // [5]
      }
    }
    & > a:first-of-type:not(:only-of-type) {
      margin-bottom: -@padding-vertically-centered / 2; // [7]
    }
    & > a:last-of-type:not(:only-of-type) {
      padding-top: 0; // [7]
      margin-top: 0;  // [7]
    }
  }
  .group-mixed--middle.link-search-result + .group-mixed--right > span.text-search-type {
    padding-top: @padding-vertically-centered;    // [8]
    padding-bottom: @padding-vertically-centered; // [8]
  }
  .group-mixed--right span.icon-star.small {
    padding-top: @padding-vertically-centered - 1;    // [9]
    padding-bottom: @padding-vertically-centered + 1; // [9]
  }
  &.large .group-mixed--right {
    padding-left: 0;                            // [11]
    & > a.link-navigation {
      padding-left: @padding-inner-group-mixed; // [11]
      display: table-cell;                // [12]
      vertical-align: middle;             // [12]
      height: @grid-vertical * 1.5;       // [12]
      line-height: @grid-vertical * 1.5;  // [12]
      & > span.icon-star.large {
        margin-right: -7px;  // [13]
      }
    }
  }
}

// 1. Text element inside .group-mixed--middle has line-height of 16px (@grid-vertical-small).
//    Set padding-top and bottom to make .group-mixed.small 30px high.
//    TODO: vertical padding in .group-mixed--middle + negative vertical margin in & > a
// 2. Set smaller height for link inside .group-mixed--right.
// 3. Align with text in .group-mixed--middle.
//    TODO: vertical padding in .group-mixed--middle + negative vertical margin in & > a
.group-mixed.small {
  .group-mixed--middle > a.link-menu-small {
    padding-top: 4px;     // [1]
    padding-bottom: 4px;  // [1]
    & > span.text-navigation-menu-small {
      line-height: @grid-vertical-small;
    }
  }
  .group-mixed--right > a {
    height: @grid-vertical-medium;       // [1]
    line-height: @grid-vertical-medium;  // [1]
    & > span.icon-star.small {
      line-height: @grid-vertical-small;
      padding-top: 4px - 1px;
      padding-bottom: 4px + 1px;
    }
  }
}

// FIXME: move (overrides.less)
// 1. Set height for clickable icon inside .group-mixed--left.
// 2. Center vertically. Supports single line, multiline and clamped text.
// 3. Make sure clamped and unclamped span inside a tag has the same height with display: block.
.group-mixed.vertically-centered {
  .group-mixed--left {
    & > a > span {
      height: @grid-vertical; // [1]
    }
  }
  .group-mixed--middle {
    padding-top: @padding-vertically-centered;    // [2]
    padding-bottom: @padding-vertically-centered; // [2]
    & > span {
      display: block; // [3]
    }
  }
}

@line-height-heading: 70px;
@padding-vertical-heading-text: 17px;
@max-line-height-heading-text: 60px;
@padding-vertical-not-so-large-heading-text: 6px;
@max-line-height-not-so-large-heading-text: 48px;

// 1. Increase line-height for heading.
// 2. Center vertically. We are using .group-mixed--middle and .group-mixed--right in .group-mixed heading
//    or just .group-heading.
.group-mixed.heading > .group-mixed--middle,
.group-mixed.heading > .group-mixed--right {
  line-height: @line-height-heading; // [1]
  vertical-align: middle;       // [2]
}

// 1. Align show completed tasks button with heading.
//    Font-size and line-height is different than heading so adjust position correctly.
.group-mixed.heading > .group-mixed--right[task-list-completed] > button {
  margin-top: @margin-top-heading-justified / 2 - 1px;  // [1]
}

// 1. Remove padding-top and padding-bottom defined elsewhere.
// 2. Add equal padding-top and padding-bottom to match, with line-height in .text-heading (=60px),
//    height of .group-heading justified (=94px).
// 3. Maximum line-height to make whole text visible.
// 4. Add equal padding-top and padding-bottom to match, with line-height in .text-heading.long (=48px) and
//    padding-top and padding-bottom in parent, height of .group-heading justified (=94px).
// 5. Expand link element's width and height.
.group-mixed.heading.vertically-centered {
  .group-mixed--middle {
    padding-top: 0;     // [1]
    padding-bottom: 0;  // [1]
    & > h2.group-heading.justified {
      padding-top: 0;     // [1]
      padding-bottom: 0;  // [1]
      & > a,
      & > div {
        padding-top: @padding-vertical-heading-text;    // [2]
        padding-bottom: @padding-vertical-heading-text; // [2]
        & > span.text-heading {
          line-height: @max-line-height-heading-text;  // [3]
        }
        & > span.text-heading.long {
          line-height: @max-line-height-not-so-large-heading-text;    // [3]
          padding-top: @padding-vertical-not-so-large-heading-text;     // [4]
          padding-bottom: @padding-vertical-not-so-large-heading-text;  // [4]
        }
      }
      & > a {
        display: block; // [5]
      }
    }
  }
}

// 1. Keep content hidden by default.
.group-mixed > .group-mixed--right {
  .icon-repeating,
  .syncing {
    display: none;  // [1]
  }
  .favorited {
    display: none;  // [1]
    &.icon-star {
      display: none;  // [1]
    }
  }
}

// 1. Align text.
.group-mixed.syncing,
.group-mixed.repeating {
  & > .group-mixed--right {
    text-align: center; // [1]
  }
}

// 1. Expand .group-mixed--middle:first-child to full width.
// 2. Add default padding.
// 3. Remove element from flow when it has no additional status.
.group-mixed.no-additional-status {
  & > .group-mixed--middle {
    &:first-child {
      display: block; // [1]
    }
    padding-right: @grid-horizontal;  // [2]
  }
  & > .group-mixed--right {
    display: none;  // [3]
  }
}

// 1. Show.
.group-mixed.repeating > .group-mixed--right > .icon-repeating,
.group-mixed.syncing:not(.offline) > .group-mixed--right > .syncing,
.group-mixed.syncing.offline > .group-mixed--right > .syncing {
  display: initial; // [1]
}

// 1. Set display block because "initial" does not work as expected.
.group-mixed.favorited > .group-mixed--right > .favorited {
  display: block; // [1]
  .icon-star {
    display: block; // [1]
  }
}

// 1. Set syncing icon.
.group-mixed.syncing:not(.offline) > .group-mixed--right > .syncing {
  .icon-syncing();  // [1]
}

// 1. Set syncing offline icon.
.group-mixed.syncing.offline > .group-mixed--right > .syncing {
  .icon-offline();  // [1]
}

// 1. Align to top when repeating and syncing visible.
// 2. Align with the top of a checkbox inside .group-mixed--left
// 3. Align with the bottom of a checkbox inside .group-mixed--left
// 4. Align vertically with checkbox inside .group-mixed--left.
.group-mixed.with-checkbox {
  &.repeating.syncing {
    & > .group-mixed--right {
      vertical-align: top;  // [1]
    }
    & > .group-mixed--left ~ .group-mixed--right {
      & > .icon-repeating {
        vertical-align: initial;  // [2]
      }
      & > .syncing {
        vertical-align: @group-mixed--left-vertical-padding;  // [3]
      }
    }
  }
  &.syncing,
  &.repeating {
    & > .group-mixed--left ~ .group-mixed--right {
      & > .syncing,
      & > .icon-repeating {
        vertical-align: 1px;  // [4]
      }
    }
  }
}

// 1. Clear padding-top set to vertically align single syncing.
// 2. Clear dimensions set for favorite link, when syncing is visible.
.group-mixed.favorited.syncing > .group-mixed--middle:first-child + .group-mixed--right {
  padding-top: 0; // [1]
  & > .favorited {
    height: auto;           // [2]
    line-height: initial;   // [2]
    text-align: center;     // [2]
    & >.icon-star {
      line-height: initial; // [2]
      padding-top: 0;       // [2]
      padding-bottom: 0;    // [2]
    }
  }
}

// 1. Align vertically with the first line of text inside .group-mixed---middle.
.group-mixed.syncing > .group-mixed--middle:first-child + .group-mixed--right,
.group-mixed.syncing.vertically-centered > .group-mixed--right {
  vertical-align: top;  // [1]
  padding-top: @group-mixed--left-vertical-padding + 1px; // [1]
}


/*
*************************************************************
# Button group
*/

/*
Class `.group-btn` groups automatically button elements horizontally. Works for 1 and 2 buttons.

```markup
<div class="group-btn" style="width: 100%;">
  <button style="background: gray;">&nbsp;</button>
  <button style="background: red;">&nbsp;</button>
</div>
<div class="group-btn" style="width: 100%;">
  <button style="background: gray;">&nbsp;</button>
</div>
```
*/

@width-button-gap: 10px;

.group-btn {
  button:first-child:nth-last-child(1) {
    width: 100%;
  }
  button:first-child:nth-last-child(2),
  button:first-child:nth-last-child(2) ~ button {
    width: 50%;
    float: left;
  }
  button:first-child:nth-last-child(2) {
    padding-right: @width-button-gap / 2;
  }
  button:first-child:nth-last-child(2) ~ button {
    padding-left: @width-button-gap / 2;
  }
}

/*
Class `.group-link` groups automatically a elements horizontally. Works for 7 and 9 links.

```markup
<div class="group-link" style="width: 100%;">
  <a href style="background: gray;">&nbsp;</a>
  <a href style="background: red;">&nbsp;</a>
  <a href style="background: gray;">&nbsp;</a>
  <a href style="background: red;">&nbsp;</a>
  <a href style="background: gray;">&nbsp;</a>
  <a href style="background: red;">&nbsp;</a>
  <a href style="background: gray;">&nbsp;</a>
  <a href style="background: red;">&nbsp;</a>
  <a href style="background: gray;">&nbsp;</a>
</div>
<div class="group-link" style="width: 100%;">
  <a href style="background: gray;">&nbsp;</a>
  <a href style="background: red;">&nbsp;</a>
  <a href style="background: gray;">&nbsp;</a>
  <a href style="background: red;">&nbsp;</a>
  <a href style="background: gray;">&nbsp;</a>
  <a href style="background: red;">&nbsp;</a>
  <a href style="background: gray;">&nbsp;</a>
</div>
```
*/
.group-link {
  text-align: center;
  a:first-child:nth-last-child(7),
  a:first-child:nth-last-child(7) ~ a {
    width: 14.2857%;
    float: left;
  }
  a:first-child:nth-last-child(9),
  a:first-child:nth-last-child(9) ~ a {
    width: 11.111%;
    float: left;
  }
}

/*
Use `.group-instruction` to create an instruction block in the middle of a section.
*/

// 1. If there are more than one paragraph, create padding between them.
// 2. Normalize line height for the message.
// 3. Add padding-bottom to the last child when it is not .textgroup-ingress, which has padding-bottom set
//    with .first class.
.group-instruction {
  display: block;
  line-height: @grid-vertical;

  p:not(:first-child) {
    padding-top: @grid-vertical;  // [1]
  }

  .textgroup-ingress {
    padding-top: @grid-vertical;
    line-height: @grid-vertical-medium;
  }

  .textgroup-ingress.first {
    padding-bottom: @grid-vertical-half;
  }
  .textgroup-ingress.last {
    padding-top: @grid-vertical-half;
  }
  .textgroup-message {
    line-height: normal;  // [2]
  }
  & >:last-child:not(.textgroup-ingress) {
    padding-bottom: @grid-vertical;  // [3]
  }
}

// Override .group-instruction for or iPhone 4s, where we need a much tighter layout
.height-small .group-instruction {
  .textgroup-ingress {
    padding-top: @grid-vertical-small;
  }
  .textgroup-ingress.last {
    padding-top: @grid-vertical-half;
  }
}

/*
Use `.group-instruction-input` to create an instruction block below an input field.
*/
.group-instruction-input {
  padding-top: @grid-vertical-small;
  padding-bottom: @grid-vertical-small;
}

/*
Use `.group-instruction-jumbtron` to create a very large instruction block in the middle of a section.
*/

// 1. Reset margins of header to make it go to the top of the page
// 2. Vertically center a span in the middle of the header
.group-instruction-jumbotron {
  p {
    margin-top: @grid-vertical * 1.5;
    margin-bottom: @grid-vertical * 1.5;
  }
  .group-instruction--header {
    margin-top: 0; // [1]
    margin-bottom: 0; // [1]
    display: table; // [2]
    height: @grid-vertical * 1.5; // [2]
    span {
      display: table-cell; // [2]
      vertical-align: middle; // [2]
    }
  }
  .group-instruction--animation {
    position: absolute;
    height: 100%;
    width: 100%;
    display: table;
    left: 0;
  }
}

// Override .group-instruction-jumbotron for iPhone 4s, less top margin
.height-small .group-instruction-jumbotron {
  .group-instruction--main {
    margin-top: @grid-vertical-medium;
  }
}

/*
*************************************************************
# Table
*/

// 1. Simple table grid layout.
.table {
  display: table; // [1]
  width: 100%;
}

.table-row {
  display: table-row;
  height: @grid-vertical;
}

// 1. Each cell has half the width.
.table-cell {
  display: table-cell;
  vertical-align: middle;
  width: 50%; // [1]
  text-align: center;
  padding-left: 5px;
  padding-right: 5px;
}

// Override for .table-cell: position both columns to the left
.table.two-to-left .table-cell {
  text-align: left; // [1]
}

.table.two-to-left .table-cell:nth-child(odd) {
  padding-left: @grid-horizontal;
}

.table.two-to-left .table-cell:nth-child(even) {
  padding-right: @grid-horizontal;
}

/*
*************************************************************
# Heading
*/

// Heading is long, multiple lines need smaller spacing, so the method above does not work
// 1. Match 88 pixels with this, to make this be the same as the above for consistent look and feel
.group-heading {
  padding-top: @grid-vertical-half + 3px; // [1]
  line-height: @grid-vertical;
  padding-bottom: @grid-vertical-half + 3px; // [1]
}

.height-small .group-heading:not([class^="justified"]):not([class*=" justified"]):not(.instruction){
  padding-top: 5px;
  padding-bottom: 10px;
  font-size: @size-font-not-so-large;
}

// FIXME: refactor or move (overrides.less)
@margin-top-heading-justified: -20px;
// 1. Justify whitespace between toolbar and content
.group-heading.justified,
.container-toolbar + .container-fluid--inner .group-heading.justified-under-toolbar {
  margin-top: @margin-top-heading-justified; // [1]
}

// FIXME: refactor or move (overrides.less)
.group-heading.instruction {
  margin-top: @grid-vertical * 1.5;
  padding-top: 2vh;
}

// 1. Override default top and bottom padding.
.group-heading.shrinked {
  padding-top: 0;     // [1]
  padding-bottom: 0;  // [1]
  &.long {
    font-size: @size-font-not-so-large;
  }
}

// Override for .group-heading.instruction: iPhone 4s, less top margin for instruction headings
.height-small .group-heading.instruction {
  margin-top: @grid-vertical-half;
}

.group-heading .highlighted {
  color: @color-text-highlighted;
}

/*
`.group-error` groups together multiple error messages.
*/
.group-error {
  position: absolute;
  margin-top: -10px;
  line-height: @grid-vertical-small;
}

.group-error.height-large {
  margin-top: 0;
}

/*
`.group-symmetrical` groups together up to three adjacent elements
symmetrically so that `.group-symmetrical-middle` is always in the
center.

Not compatible with `.row` so we need to apply padding-left and -right inside.

*/

@max-width-group-symmetrical-middle: 70px;

.group-symmetrical--left, .group-symmetrical--right {
  display: table-cell;
  vertical-align: middle;
}

.group-symmetrical {
  height: @grid-vertical;
  line-height: @grid-vertical;
}

@group-symmetrical-edge-padding-to-center: 10px;
// 1. Inherit varying container height.
.group-symmetrical--left {
  height: inherit;  // [1]
  text-align: left;
  float: left;
  padding-left: @grid-horizontal;
  padding-right: @group-symmetrical-edge-padding-to-center;
}

// 1. Vertically and horizontally align the content of the middle element.
// Works with <a><span></span></a> structure. Unfortunately a <button> element does not work here
// because that buttons don't work with display:table*. Bootstrap has a similar solution:
// http://getbootstrap.com/components/#input-groups-buttons
// 2. Make sure icon-calendar does not increase height by setting it to block element.
.group-symmetrical--middle {
  position: absolute;
  .center-horizontally-absolute;
  max-width: @max-width-group-symmetrical-middle;
  height: inherit;

  & > a {                        // [1]
    display: table;
    width: 100%;
    height: inherit;
    & > span,
    & > div {                   // [1]
      text-align: center;
      height: inherit;
      display: table-cell;
      vertical-align: middle;
    }
    & > span.icon-calendar, & > span.icon-tag {
      display: block; // [2]
    }
  }
}

.text-heading-primary--outer {
  display: table;
  width: 100%;
  .text-heading-primary--inner {
    text-align: center;
    height: inherit;
    display: table-cell;
    vertical-align: middle;
  }
}

// 1. Inherit varying container height.
.group-symmetrical--right {
  height: inherit;  // [1]
  float: right;
  padding-right: @grid-horizontal;
  padding-left: @group-symmetrical-edge-padding-to-center;
}

@margin-top-heading: 9px;
@margin-bottom-heading: 9px;

// 1. Set margin-top|bottom for large .group-symmetrical to add space on top|bottom of it.
.group-symmetrical {
  &.height-large--top {
    margin-top: @margin-top-heading;  // [1]
  }
  &.height-large--bottom {
    margin-bottom: @margin-bottom-heading;  // [1]
  }
}

.group-symmetrical--middle.width-large {
  max-width: @max-width-group-symmetrical-middle * 2;
}

// .container-toolbar has a special .group-symmetrical
@height-toolbar: 62px;
.container-toolbar .group-symmetrical {
  height: @height-toolbar;
  line-height: @height-toolbar;
}

// .modal-toolbar has a special .group-symmetrical
@height-modal-toolbar: 30px;
.modal-toolbar.group-symmetrical {
  height: @height-modal-toolbar;
  line-height: @height-modal-toolbar;
  .group-symmetrical--right {
    padding-right: 14px;
  }
}

.group-centered {
  width: 100%;
  text-align: center;
}

// Disables every element inside the container
.container-disabled {
  * {
    pointer-events: none;
    color: @color-text-disabled;
  }
  a.active {
    pointer-events: auto !important;
    span {
      pointer-events: auto !important;
    }
  }
}

// Groups rows of detailed comments
.group-details {
  .row {
    line-height: @grid-vertical-small;
  }
  .row:last-child{
    padding-bottom: @grid-vertical-half;
  }
}

// Groups external foreign html
.group-html-external {
  h1 {
    font-size: 24px;
    padding-top: 15px;
    padding-bottom: 15px;
  }
  h2 {
    font-size: 18px;
  }
  h3 {
    font-size: 16px;
  }
  h4 {
    padding-top: 10px;
    font-size: 14px;
  }
  p, li {
    font-size: 12px;
  }
}

/*
**************************************************************************
# Swiper
*/

// 1. Inherit height for .swiper-wrapper and .swiper-slide
.swiper-wrapper, .swiper-slide {
  height: inherit; // [1]
}

// 1. Inherit height for vertical swiper slides.
.swiper-container[swiper-type="page"] {
  height: inherit;  // [1]
}

// 1. Fix crash on some iPhones when swiping.
.swiper-slide {
  width: 100%;  // [1]
}

// 1. -webkit-overflow-scrolling is not working if two elements are layered on top of each other with translate3d.
//
//    Slide under element:
//      -webkit-overflow-scrolling must be set to 'auto' in slide which has been positioned with translate3d
//      under element to get -webkit-overflow-scrolling working in element.
//
//    NOTE: This bug is fixed in VKWebView starting from iOS 8. At the moment, Cordova still uses UIWebView.
.swiper-slide-under-element .container-content {
  -webkit-overflow-scrolling: auto; // [1]
}

// 1. Set full height.
// 2. Set full width.
// 3. Set new line with the value of line-height into padding-bottom.
// 4. Override values from msd-elastic
textarea#ignoreSnap {
  padding-top: @padding-vertically-centered;    // [1]
  padding-bottom: @padding-vertically-centered; // [1]
  padding-left: @grid-horizontal;   // [2]
  padding-right: @grid-horizontal;  // [2]
}

textarea#ignoreSnap:not(.disable-full-height):focus {
  padding-bottom: @grid-vertical-half;  // [3]
  overflow: initial !important; // [4]
  height: 100% !important;      // [1,4]
}

textarea#ignoreSnap.disable-full-height.input-separate {
  margin-top: @grid-vertical-half;
}

// From http://stackoverflow.com/a/6471713
.text-prefixed--label {
  float: left;
  padding-top: @padding-vertically-centered;
  padding-bottom: @padding-vertically-centered;
  padding-left: @grid-horizontal;
}
.text-prefixed--outer {
  overflow: hidden;
  .text-prefixed {
    padding-top: @padding-vertically-centered;
    padding-bottom: @padding-vertically-centered;
    padding-right: @grid-horizontal;
  }
}
