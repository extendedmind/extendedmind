@import "foundation.less";
@import "inputs.less";

/*
<h1 class="main-heading">Layout</h1>

TODO: em grid structure explained in plain English (when new grid structure decided!)
*/

@height-container-toolbar: @grid-vertical;
@height-landscape-max: 769px;
@height-max: 1025px;
@width-max: 1025px;
@width-column-max: 568px; // iPhone 5 landscape is still one column
@width-menu: 260px;

/*
**************************************************************************
# LEVEL 1: Root
*/

// 1. Set width and height for absolutely positioned (grand)children.
// 2. Must set position to relative for correct width during transitions. Otherwise page would scroll horizontally.
.container-root {
  height: 100%; // [1]
  width: 100%;  // [1]
  position: relative; // [2]
}

/*
**************************************************************************
# LEVEL 2: Optional Intermediate Containers (main, drawer-aisle)
*/

// 1. Inherit width and height for absolutely positioned (grand)children.
.container-main, .container-drawer-aisle, .container-drawer-aisle--inner {
  width: inherit;   // [1]
  height: inherit;  // [1]
}

// 1. .container-drawer-aisle must have a background in order to hide .container-menu and .container-editor.
.container-drawer-aisle {
  position: absolute;       // [1]
  background-color: white;  // [1]
}

/*
**************************************************************************
# LEVEL 3: Primary Containers (master, editor, menu)
*/

// 1. Layout for Snap.js. See https://github.com/jakiestfu/Snap.js/#layout
// 2. Inherit height to expand vertically and for (grand)children as well.
.container-master, .container-editor, .container-menu {
  position: absolute; // [1]
  height: inherit;    // [2]
}

// 1. Intermediate div needs height to work
.container-editor--inner {
  height: inherit;    // [1]
}

// 1. Maximum height is set programmatically - set default maximum height here as well for reference.
.container-master, .container-editor {
  max-height: @height-landscape-max;  // [1]
}

/*
Menu
*/

@height-menu-footer: 80px;
// 1. Use native-style scrolling in WebKit browsers
.container-menu {
  -webkit-overflow-scrolling: touch;  // [1]
  width: @width-menu;
  overflow-y: auto;
  height:100%;
  background-color: @color-background-menu;
}

.container-menu--top {
  min-height: 100%;
  margin: 0 auto -@height-menu-footer; /* the bottom margin is the negative value of the footer's height */
  .separate {
    // use this to separate link elements from other
    line-height: @grid-vertical * 3;
  }
}

.container-menu--bottom, .container-menu--push {
  height: @height-menu-footer;
}

.container-menu--bottom {
  height: @height-menu-footer;
}

/*
Vertically center .container-master and .container-editor in large screens
*/
@media (min-height: @height-landscape-max) {
  .container-master, .container-editor {
    margin-top: -@height-landscape-max / 2;
    top: 50%;
  }
}

/*
**************************************************************************
# LEVEL 4: Fluid, toaster
*/
@height-footer: @grid-vertical;

/*
`.container-fluid` sets the vertical positioning of the content area.
*/
.container-fluid {
  // FIXME: is this needed?
  .center-horizontally;
  // FIXME: is this needed?
}

// Fluid container height.
//
// Sources:
// http://stackoverflow.com/a/15933376
// http://stackoverflow.com/a/12255692
// http://pixelsvsbytes.com/blog/2011/09/sticky-css-footers-the-flexible-way/
//
// 1. Fixes width calculation with swiper inside. See: http://stackoverflow.com/a/19835024
// 2. Inherit height for display: table.
// 3. Set width for display: table
.container-fluid {
  display: table;
  table-layout: fixed;  /* [1] */
  height: inherit;      /* [2] */
  width: 100%;          /* [3] */
}

// 1. Fluid container height.
// 2. Inherit height because parent uses display: table
// 3. Default bottom padding to make room for footer. NOTE: Override programmatically if footer height is different.
.container-fluid--inner {
  display: table-cell;            // [1]
  height: inherit;                // [1,2]
  padding-bottom: @height-footer; // [3]
}

// 1. Inherit width from parent. Elements inside swiper would otherwise be as wide as `.swiper-wrapper`.
.swiper-slide .container-content {
  width: inherit; /* [1] */
}

// 1. Use same positioning as in swiper to make .container-content scrollable and .container-content--after visible.
//    Set left and right properties as well because .container-master and .container-editor are absolutely positioned.
//    See: http://www.smashingmagazine.com/2013/08/09/absolute-horizontal-vertical-centering-css/
// 2. .container-content--after inside swiper is absolutely positioned
//    so it needs to be positioned to the bottom of the content-container.
//    NOTE: Override programmatically if footer height is different.
//          See http://css-tricks.com/snippets/css/sticky-footer/
.container-master, .container-editor {
  .swiper-slide {
    .container-content, .container-content--after {
      position: absolute; // [1]
      left: 0;            // [1]
      right: 0;           // [1]
    }
    .container-content--after {
      bottom: -@height-footer;  // [2]
    }
  }
}

/*
* Optional outer element to wrap container-content and container-content--after.
* Needed only for swiper elements
*/
// 1. To get drawer handle to work, height needs to be set
.container-content--outer {
  height: inherit; // [1]
}

// 1. Default height for footer. NOTE: Override programmatically if footer height is different.
.container-content--after {
  height: @height-footer; // [1]
}

// 1. Put toaster to the bottom of its parent, .container-master or .container-editor
// 2. Center toaster
// 3. Set height and color
.container-toaster {
  position: absolute; // [1]
  bottom: 0; // [1]
  .center-horizontally-absolute; // [2]
  max-width: @width-column-max; // [2]
  height: @grid-vertical; // [3]
  line-height: @grid-vertical; // [3]
  background-color: @color-background-toaster; // [3]
}

/*
**************************************************************************
# LEVEL 5: Secondary Containers (content, toolbar, titlebar)
*/

// 1. Align all secondary containers horizontally
// 2. Set maximum width.
.container-content, .container-content--after {
  .center-horizontally;         // [1]
  max-width: @width-column-max; // [2]
}

// < save
//    title
//  inbox task note list
// 1. Fluid container height
.container-titlebar, .container-toolbar {
  display: table-row; /* [1] */
}

// 1. Set content inside wrapper and center horizontally with max-width,
//    because .container-toolbar has display: table-row which can not(?) be centered horizontally in CSS.
.container-toolbar--inner, .container-titlebar--inner {
  max-width: @width-column-max; // [1]
  .center-horizontally;         // [1]
}

/*
`.container-content` specifies the vertical overflow.
*/

// 1. Use native-style scrolling in WebKit browsers
.container-content {
  -webkit-overflow-scrolling: touch;  // [1]
  height: 100%;
  overflow-y: auto;
}

// menu     title    omnibar
.container-toolbar {
  height: @height-container-toolbar;
}

/*
**************************************************************************
# LEVEL 6: row and groups
*/

@width-button-gap: 10px;

/*
`.row` is uses horizontal alignment. It specifies the left and right
margin.
*/
.row {
  width: 100%;
  padding-left: @grid-horizontal;
  padding-right: @grid-horizontal;
}

/*
Class `.group-btn` groups automatically button elements horizontally. Works for 1 and 2 buttons.

```markup
<div class="group-btn" style="width: 100%;">
  <button style="background: gray;">&nbsp;</button>
  <button style="background: red;">&nbsp;</button>
</div>
<div class="group-btn" style="width: 100%;">
  <button style="background: gray;">&nbsp;</button>
</div>
```
*/
.group-btn {
  button:first-child:nth-last-child(1) {
    width: 100%;
  }
  button:first-child:nth-last-child(2),
  button:first-child:nth-last-child(2) ~ button {
    width: 50%;
    float: left;
  }
  button:first-child:nth-last-child(2) {
    padding-right: @width-button-gap / 2;
  }
  button:first-child:nth-last-child(2) ~ button {
    padding-left: @width-button-gap / 2;
  }
}

/*
Class `.group-link` groups automatically a elements horizontally. Works for 7 and 9 links.

```markup
<div class="group-link" style="width: 100%;">
  <a href style="background: gray;">&nbsp;</a>
  <a href style="background: red;">&nbsp;</a>
  <a href style="background: gray;">&nbsp;</a>
  <a href style="background: red;">&nbsp;</a>
  <a href style="background: gray;">&nbsp;</a>
  <a href style="background: red;">&nbsp;</a>
  <a href style="background: gray;">&nbsp;</a>
  <a href style="background: red;">&nbsp;</a>
  <a href style="background: gray;">&nbsp;</a>
</div>
<div class="group-link" style="width: 100%;">
  <a href style="background: gray;">&nbsp;</a>
  <a href style="background: red;">&nbsp;</a>
  <a href style="background: gray;">&nbsp;</a>
  <a href style="background: red;">&nbsp;</a>
  <a href style="background: gray;">&nbsp;</a>
  <a href style="background: red;">&nbsp;</a>
  <a href style="background: gray;">&nbsp;</a>
</div>
```
*/
.group-link {
  text-align: center;
  a:first-child:nth-last-child(7),
  a:first-child:nth-last-child(7) ~ a {
    width: 14.2857%;
    float: left;
  }
  a:first-child:nth-last-child(9),
  a:first-child:nth-last-child(9) ~ a {
    width: 11.111%;
    float: left;
  }
}

/*
Use `.group-instruction` to create an instruction block in the middle of a section.
*/
.group-instruction {
  display: block;
  line-height: @grid-vertical;
  .set-font-large();

  // If there are more than one paragraph, create padding between them
  p:not(:first-child) {
    padding-top: @grid-vertical;
  }
}

/*
Use `.group-instruction-jumbtron` to create a very large instruction block in the middle of a section.
*/

// 1. Reset margins of header to make it go to the top of the page
// 2. Vertically center a span in the middle of the header
.group-instruction-jumbotron {
  .set-font-jumbotron();
  line-height: @grid-vertical * 1.5;
  p {
    margin-top: @grid-vertical * 1.5;
    margin-bottom: @grid-vertical * 1.5;
  }
  .group-instruction--header {
    margin-top: 0; // [1]
    margin-bottom: 0; // [1]
    display: table; // [2]
    height: @grid-vertical * 1.5; // [2]
    span {
      display: table-cell; // [2]
      vertical-align: middle; // [2]
    }
  }
}


/*
Use `.group-mixed` to create horizontal collections of different elements.

Not compatible with `.row` so we need to apply padding-left and -right inside.

NOTE: Implementation depends on the removing of --left|--right DOM nodes if they have no content
*/

@padding-inner-group-mixed: 10px;

.group-mixed {
  display: block;
}

.group-mixed--left, .group-mixed--middle, .group-mixed--right {
  display: table-cell;
  vertical-align: top;
}

// 1. Force all child elements not to increase .group-mixed height
.group-mixed--left, .group-mixed--right {
  * {
    display: block; /* [1] */
  }
}

// 1. Increase clicking area
.group-mixed--left {
  padding-right: @padding-inner-group-mixed;

  a, input[type="checkbox"] + label, span {
    padding-left: @grid-horizontal; /* [1] */
    height: @grid-vertical;         /* [1] */
  }
  a, input[type="checkbox"] + label:before, span {
    line-height: @grid-vertical;
  }
}

.group-mixed--middle {
  width: 100%;
  line-height: @grid-vertical;
}

// 1. Increase clicking area
.group-mixed--right {
  padding-left: @padding-inner-group-mixed;

  // NOTE: all buttons have height defined
  button, a {
    padding-right: @grid-horizontal;  /* [1] */
  }
  a {
    height: @grid-vertical;
  }
}

// 1. Increase clicking area
.group-mixed--middle:first-child {
  a, input, textarea, h1, h2, h3 {
    padding-left: @grid-horizontal;   /* [1] */
  }
}
.group-mixed--middle:last-child {
  a, textarea, h1, h2, h3 {
    padding-right: @grid-horizontal;  /* [1] */
  }
}

// 1. Expand width and line-height when there are no sibling elements in .group-mixed
.group-mixed--middle:only-child {
  display: block;               /* [1] */
  line-height: @grid-vertical;  /* [1] */
}

// 1. Android hack: 10px padding caused redraw problems on the checkbox while swiping,
//    and no other CSS solution fixed the problem.
//    Something like this: http://stackoverflow.com/a/16174338/2659424
//    might be the only proper solution to the repaint problems with Android's WebKit.
.android .group-mixed--left {
  padding-right: 15px;  /* [1] */
}

// 1. Increase line-height for heading.
// 2. Center vertically. We are using .group-mixed--middle and .group-mixed--right in .group-mixed heading
//    or just .group-heading.
.group-heading,
.group-mixed.heading > .group-mixed--middle, .group-mixed--right {
  line-height: @grid-vertical * 2;  // [1]
  vertical-align: middle;           // [2]
}

/*
`.group-error` groups together multiple error messages.
*/
.group-error {
  line-height: @grid-vertical-half;
}

/*
`.group-symmetrical` groups together up to three adjacent elements
symmetrically so that `.group-symmetrical-middle` is always in the
center.

Not compatible with `.row` so we need to apply padding-left and -right inside.

*/

@max-width-group-symmetrical-middle: 70px;

.group-symmetrical--left, .group-symmetrical--middle, .group-symmetrical--right {
  display:table-cell;
  vertical-align: middle;
}

.group-symmetrical {
  height: @grid-vertical;
  line-height: @grid-vertical;
}
.group-symmetrical--left {
  text-align: left;
  float: left;
  padding-left: @grid-horizontal;
  height: @grid-vertical;
}
.group-symmetrical--middle {
  position: absolute;
  .center-horizontally-absolute;
  text-align: center;
  max-width: @max-width-group-symmetrical-middle;
}
.group-symmetrical--right {
  float: right;
  padding-right: @grid-horizontal;
  height: @grid-vertical;
}

/*
**************************************************************************
# Swiper
*/

// 1. Inherit height for .swiper-wrapper and .swiper-slide
.swiper-wrapper, .swiper-slide {
  height: inherit; // [1]
}

// 1. Inherit height for vertical swiper slides.
//    NOTE: evaluate need for this when vertical slide pages are implemented with new layout.
.swiper-container[swiper-type="page"] {
  height: inherit;  // [1]
}

// 1. Fix crash on some iPhones when swiping.
.swiper-slide {
  width: 100%;  // [1]
}

// 1. -webkit-overflow-scrolling is not working if two elements are layered on top of each other with translate3d.
//
//    Slide under element:
//      -webkit-overflow-scrolling must be set to 'auto' in slide which has been positioned with translate3d
//      under element to get -webkit-overflow-scrolling working in element.
//
//    NOTE: This bug is fixed starging from iOS 8.
.swiper-slide-under-element .container-content {
  -webkit-overflow-scrolling: auto; // [1]
}
