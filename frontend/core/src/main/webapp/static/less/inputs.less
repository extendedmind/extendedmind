@import "foundation.less";
@import "icons.less";
@import "typography.less";
@import "layout.less";

/*
<h1 class="main-heading">Inputs</h1>

All forms and buttons used in extended mind UI. Imports following less libraries:

* foundation.less
* icons.less
* typography.less
* layout.less
*/

@plus-button-width: 27px;
@icon-button-width: @plus-button-width;

/*
# Forms
*/

/*
* `<input>`, `<select>` and `<textarea>` use maximum width and inherit their background color.
* `<textarea>` height is @vertical-grid / 2 and uses `.break-words` (foundation.less)

*/
input, select, textarea {
  width: 100%;
  background-color: inherit;
}

textarea {
  min-height: @vertical-grid / 2;
  height: @vertical-grid / 2;
  vertical-align: middle;
  .break-words;
}

/*
Use `.simple-input` to create minimalist input fields (no borders or shadows).

```markup
<input type="text" class="simple-input" value="simple input"/>
<textarea class="simple-input">simple textarea</textarea>
```
*/

.simple-input {
  outline: none;
  border: none !important;
  box-shadow: none !important;
  padding: 0;
  background-image: none;
}

/*
Inline form fields have wider bottom padding (used mainly when viewing item details).
```markup
<div class="inline-form-fields">select context...</div>
<div class="inline-form-fields">select repeating...</div>
<div class="inline-form-fields">description...</div>
```
*/
.inline-form-fields {
  padding-bottom: 10px;
}

/*
`.form-group` is used to make inline forms width 100%.
```markup
  <div class="form-group">
    <input type="password" class="simple-input" placeholder="enter old password..." />
  </div>
```
*/
.form-group {
  width: 100%;
}

/*
To indicate errors inside `.form-group` and `<p>`, use `.validation-error`.
```markup
  <div class="form-group">
    <input type="password" name="password" id="input-password" class="simple-input ng-dirty ng-valid-required ng-invalid ng-invalid-minlength" ng-model="user.password" ng-minlength="7" ng-blur="passwordAttempted=true" placeholder="enter password..." required="">
    <p ng-show="loginForm.password.$invalid &amp;&amp; !loginForm.password.$pristine &amp;&amp; passwordAttempted" class="validation-error">password must be 7 characters or more</p>
  </div>
```

If you want to display the error right under an element, use `<a>` and `.text-link`.
```markup
  <div class="form-group button-container">
    <button type="submit" class="wide-button normal-button" ng-disabled="!loginForm.$valid" ng-click="userLogin()">
      <span>log in</span>
    </button>
    <p ng-show="loginFailed" class="validation-error">invalid username or password.</p>
  </div>
```
*/
// TODO: NEEDS REFACTORING
.form-group {
  p.validation-error {
    display: inline;
    font-size: @font-smallest-size;
    color: @warning;
    line-height: @vertical-grid-half;
    vertical-align: top;
    a.text-link {
      vertical-align: top;
    }
  }
}

/*
Date input gets formatted by `.date-input-placeholder`.
```markup
<div ng-if="showDateInput" class="ng-scope">
  <input type="date" class="simple-input date-input-placeholder" placeholder="08/07/2014" />
</div>
```
*/
//TODO MENEE UUSIKSI (PIKADAY)
.date-input-placeholder {
  display: block;
}

/*
## Form wrapping (horizontal positioning)
Following are used to divide form items horizontally:
* `.table-wrapper`
* `.left-input-wrapper`
* `.right-button-wrapper`
* `.center-input-wrapper`
* `.left-checkbox-wrapper`

Input on the left and button on the right OR checkbox on the left, input in the center, and button on the right.

```markup
<div class="table-wrapper">
  <input type="checkbox" class="left-checkbox-wrapper" />
    <label></label>
    <a href="" class="center-input-wrapper">
      book flight
    </a>
</div>
```
*/
.table-wrapper {
  display: table;
  .center-horizontally;
  width: 100%;
}
.left-input-wrapper, .right-button-wrapper, .center-input-wrapper, .left-checkbox-wrapper {
  display: table-cell;
  vertical-align: middle;
}
.left-input-wrapper, .center-input-wrapper {
  width: 100%;
}
.right-button-wrapper, .left-checkbox-wrapper {
  line-height: 100%;
  button {
    // Quick fix to center the plus button
    // NOTE! Tested with application font!
    padding-top: 5px;
  }
}
.left-checkbox-wrapper {
  width: @icon-button-width + 8px;
}
.right-button-wrapper {
  width: @icon-button-width + 8px;
  button {
    padding-left: 20px;
  }
}

/*
# Buttons

Basic buttons
```markup
<div class="form-group button-container vertical-buttons">
  <button type="submit" class="normal-button wide-button">normal button</button>
  <button type="submit" class="cancel-button wide-button">cancel button</button>
  <button type="submit" class="border-button wide-button">border button</button>
  <button type="submit" class="delete-button wide-button">delete button</button>
  <button type="submit" class="transparent-button wide-button">transparent button</button>
  <button type="submit" class="tab-button wide-button">tab button</button>
  <button type="submit" class="add-button wide-button">add button</button>
</div>
```
*/
button.normal-button {
  color: white;
  & {
    background-color: @normal-button;
  }
  &:active {
    background-color: @normal-button-pressed;
  }
  &[disabled] {
    background-color: @normal-button-disabled;
  }
}
button.cancel-button {
  color: white;
  & {
    background-color: @cancel-button;
  }
  &:active {
    background-color: @cancel-button-pressed;
  }
}
button.border-button {
  border-style: solid !important;
  border-width: 2px !important;
  background-color: white;
  font-size: @default-font-size;
  & {
    color: @normal-button;
    border-color: @normal-button;
  }
  &:active {
    color: @normal-button-pressed;
    border-color: @normal-button-pressed;
  }
  &[disabled] {
    color: @normal-button-disabled;
    border-color: @normal-button-disabled;
  }
}
button.delete-button {
  color: white;
  & {
    background-color: @delete-button;
  }
  &:active {
    background-color: @delete-button-pressed;
  }
}
button.transparent-button {
  color: @normal-button;
  &:hover {
    color: @normal-button-hover;
  }
  &:active {
    color: @normal-button-pressed;
  }
  &[disabled] {
    color: @normal-button-disabled;
  }
}
button.tab-button {
  color: white;
  background-color: @tab-button;
  &:hover {
    background-color: @tab-button-hover;
  }
  &:active {
    background-color: @tab-button-pressed;
  }
  &[disabled] {
    color: black;
    background-color: white;
  }
}
button.add-button {
  .simple-input;
  background-color: white;
  color: @default-element;
}

/*
Use `.button` minimalist look (no default button borders or shadings).

```markup
<button class="button">sort inbox</button>
```
*/
.button {
  background: none;
  cursor: pointer;
  border: none;
  border: 0px;
  display: inline-block;
}

/*
* Use `.button-container` to group buttons
* The parent must be wrapped with `.button-row`

```markup
<ul class="button-row">
<li class="button-container left-of-two">
  <button type="button" class="default-button font-small">change password</button>
</li>
<li class="button-container right-of-two">
  <button type="button" class="default-button font-small">logout</button>
</li>
</ul>
```
*/
// TODO: refactoring needed
.button-row {
  width: 100%;
  height: @vertical-grid;
  vertical-align: middle;
  .button-container {
    button {
      .simple-input;
      width: 100%;
      height: @vertical-grid;
    }
  }
}
.button-container {
  text-align: center;
}

/*
TODO: Refactoring needed, button presentation more clearly (like in Yelp Styleguide)
http://stackoverflow.com/a/12198561/2659424

* `.default-button` gives the basic button coloring (pressed and disabled states)

```markup
<ul class="button-row">
<li class="button-container left-of-two">
  <button type="button" class="default-button font-small highlighted-button">highlighted</button>
</li>
<li class="button-container right-of-two">
  <button type="button" class="default-button disabled="disabled" font-small">disabled</button>
</li>
</ul>
```
*/
button.default-button {
  color: white;
  & {
    background-color: @default-button;
  }
  &:active {
    background-color: @default-button-pressed;
  }
  &[disabled] {
    background-color: @default-button-disabled;
  }
}
button.highlighted-button {
  background-color: white;
  & {
    color: @highlighted-button;
  }
  &:active {
    color: @highlighted-button-pressed;
  }
  &[disabled] {
    color: @highlighted-button-disabled;
  }
}

/*
Use `.wide-button` to make full width buttons.

```markup
<button type="submit" class="wide-button normal-button">
<span>done</span>
</button>
```
*/
.wide-button {
  .simple-input;
  .center-horizontally;
  height: @vertical-grid;
  width: 100%;
  display: block;
}

/*
Use `.vertical-buttons` to make buttons align in a vertical column

```markup
 <div class="form-group button-container vertical-buttons">
<button type="submit" class="wide-button normal-button">
  <span>send</span>
</button>
<button type="submit" class="wide-button cancel-button">
  <span>cancel</span>
</button>
</div>
```
*/
.vertical-buttons {
  button {
    margin-top: @vertical-grid / 4;
    margin-bottom: @vertical-grid / 4;
  }
}

// CHECKBOXES

/*
Basic checkbox

TODO: write example when icons are working with styleguide
*/
// Make labels also clickable
label {
  cursor: pointer;
}
 // Hide default HTML checkbox
 input[type=checkbox] {
  display: none;
}
input[type='checkbox'] + label:before {
  font-family: 'icomoon';
  font-size: @icon-size;
  padding-right: 10px;
  vertical-align: middle;
  color: @default-button;
}
input[type="checkbox"] + label:before {
  .icon-selection-empty;
}

input[type="checkbox"] + label.overdue:before {
  color: @overdue-task;
}

input[type="checkbox"]:checked + label:before {
  .icon-selection-checked;
  color: @highlighted-element;
}

// Android hack: 10px padding caused redraw problems
// on the checkbox while swiping, and no other CSS
// solution fixed the problem. Something like this:
// http://stackoverflow.com/a/16174338/2659424
// might be the only proper solution to the repaint
// problems with Android's WebKit.
.android input[type='checkbox'] + label:before {
  padding-right: 15px;
}

input[type=date] {
  &.simple-input {
    color: @default-element;
  }
  background: none;
  border: none;
  outline: none;
  padding-bottom: 0;
  padding-left: 0;
  padding-right: 0;
}

// SELECTIONS

select {
  &.simple-input {
    color: @default-element;
    background: none;
    padding: 0;
  }
  option {
    color: black;
  }
  option:first-child {
    color: @default-element;
  }
}

::-webkit-resizer {
  display: none;
}

button {
  padding: 0;
  margin: 0;
}

// PLACEHOLDER TWEAK

::-webkit-input-placeholder { /* WebKit browsers */
  color: @default-element;
}
:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
  color: @default-element;
}
::-moz-placeholder { /* Mozilla Firefox 19+ */
  color: @default-element;
}
:-ms-input-placeholder { /* Internet Explorer 10+ */
  color: @default-element;
}
