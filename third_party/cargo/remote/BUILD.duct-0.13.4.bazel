"""
@generated
cargo-raze crate build file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

# buildifier: disable=load
load(
    "@rules_rust//rust:defs.bzl",
    "rust_binary",
    "rust_library",
    "rust_proc_macro",
    "rust_test",
)

package(default_visibility = [
    # Public for visibility by "@raze__crate__version//" targets.
    #
    # Prefer access through "//third_party/cargo", which limits external
    # visibility to explicit Cargo.toml dependencies.
    "//visibility:public",
])

licenses([
    "notice",  # MIT from expression "MIT"
])

# Generated Targets

rust_binary(
    # Prefix bin name to disambiguate from (probable) collision with lib name
    # N.B.: The exact form of this is subject to change.
    name = "cargo_bin_cat",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
    ],
    crate_root = "src/bin/cat.rs",
    data = [],
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=cat",
        "manual",
    ],
    version = "0.13.4",

    # buildifier: leave-alone
    deps = [
        ":duct",
        "@raze__once_cell__1_13_0//:once_cell",
        "@raze__os_pipe__0_9_2//:os_pipe",
        "@raze__shared_child__0_3_5//:shared_child",
    ] + selects.with_or({
        # cfg(unix)
        (
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-linux-androideabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:x86_64-linux-android",
        ): [
            "@raze__libc__0_2_126//:libc",
        ],
        "//conditions:default": [],
    }),
)


rust_binary(
    # Prefix bin name to disambiguate from (probable) collision with lib name
    # N.B.: The exact form of this is subject to change.
    name = "cargo_bin_child_grandchild",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
    ],
    crate_root = "src/bin/child_grandchild.rs",
    data = [],
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=child_grandchild",
        "manual",
    ],
    version = "0.13.4",

    # buildifier: leave-alone
    deps = [
        ":duct",
        "@raze__once_cell__1_13_0//:once_cell",
        "@raze__os_pipe__0_9_2//:os_pipe",
        "@raze__shared_child__0_3_5//:shared_child",
    ] + selects.with_or({
        # cfg(unix)
        (
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-linux-androideabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:x86_64-linux-android",
        ): [
            "@raze__libc__0_2_126//:libc",
        ],
        "//conditions:default": [],
    }),
)


rust_binary(
    # Prefix bin name to disambiguate from (probable) collision with lib name
    # N.B.: The exact form of this is subject to change.
    name = "cargo_bin_echo",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
    ],
    crate_root = "src/bin/echo.rs",
    data = [],
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=echo",
        "manual",
    ],
    version = "0.13.4",

    # buildifier: leave-alone
    deps = [
        ":duct",
        "@raze__once_cell__1_13_0//:once_cell",
        "@raze__os_pipe__0_9_2//:os_pipe",
        "@raze__shared_child__0_3_5//:shared_child",
    ] + selects.with_or({
        # cfg(unix)
        (
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-linux-androideabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:x86_64-linux-android",
        ): [
            "@raze__libc__0_2_126//:libc",
        ],
        "//conditions:default": [],
    }),
)


rust_binary(
    # Prefix bin name to disambiguate from (probable) collision with lib name
    # N.B.: The exact form of this is subject to change.
    name = "cargo_bin_exe_in_dir",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
    ],
    crate_root = "src/bin/exe_in_dir.rs",
    data = [],
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=exe_in_dir",
        "manual",
    ],
    version = "0.13.4",

    # buildifier: leave-alone
    deps = [
        ":duct",
        "@raze__once_cell__1_13_0//:once_cell",
        "@raze__os_pipe__0_9_2//:os_pipe",
        "@raze__shared_child__0_3_5//:shared_child",
    ] + selects.with_or({
        # cfg(unix)
        (
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-linux-androideabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:x86_64-linux-android",
        ): [
            "@raze__libc__0_2_126//:libc",
        ],
        "//conditions:default": [],
    }),
)


rust_binary(
    # Prefix bin name to disambiguate from (probable) collision with lib name
    # N.B.: The exact form of this is subject to change.
    name = "cargo_bin_print_env",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
    ],
    crate_root = "src/bin/print_env.rs",
    data = [],
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=print_env",
        "manual",
    ],
    version = "0.13.4",

    # buildifier: leave-alone
    deps = [
        ":duct",
        "@raze__once_cell__1_13_0//:once_cell",
        "@raze__os_pipe__0_9_2//:os_pipe",
        "@raze__shared_child__0_3_5//:shared_child",
    ] + selects.with_or({
        # cfg(unix)
        (
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-linux-androideabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:x86_64-linux-android",
        ): [
            "@raze__libc__0_2_126//:libc",
        ],
        "//conditions:default": [],
    }),
)


rust_binary(
    # Prefix bin name to disambiguate from (probable) collision with lib name
    # N.B.: The exact form of this is subject to change.
    name = "cargo_bin_pwd",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
    ],
    crate_root = "src/bin/pwd.rs",
    data = [],
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=pwd",
        "manual",
    ],
    version = "0.13.4",

    # buildifier: leave-alone
    deps = [
        ":duct",
        "@raze__once_cell__1_13_0//:once_cell",
        "@raze__os_pipe__0_9_2//:os_pipe",
        "@raze__shared_child__0_3_5//:shared_child",
    ] + selects.with_or({
        # cfg(unix)
        (
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-linux-androideabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:x86_64-linux-android",
        ): [
            "@raze__libc__0_2_126//:libc",
        ],
        "//conditions:default": [],
    }),
)


rust_binary(
    # Prefix bin name to disambiguate from (probable) collision with lib name
    # N.B.: The exact form of this is subject to change.
    name = "cargo_bin_sleep",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
    ],
    crate_root = "src/bin/sleep.rs",
    data = [],
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=sleep",
        "manual",
    ],
    version = "0.13.4",

    # buildifier: leave-alone
    deps = [
        ":duct",
        "@raze__once_cell__1_13_0//:once_cell",
        "@raze__os_pipe__0_9_2//:os_pipe",
        "@raze__shared_child__0_3_5//:shared_child",
    ] + selects.with_or({
        # cfg(unix)
        (
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-linux-androideabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:x86_64-linux-android",
        ): [
            "@raze__libc__0_2_126//:libc",
        ],
        "//conditions:default": [],
    }),
)


rust_binary(
    # Prefix bin name to disambiguate from (probable) collision with lib name
    # N.B.: The exact form of this is subject to change.
    name = "cargo_bin_status",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
    ],
    crate_root = "src/bin/status.rs",
    data = [],
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=status",
        "manual",
    ],
    version = "0.13.4",

    # buildifier: leave-alone
    deps = [
        ":duct",
        "@raze__once_cell__1_13_0//:once_cell",
        "@raze__os_pipe__0_9_2//:os_pipe",
        "@raze__shared_child__0_3_5//:shared_child",
    ] + selects.with_or({
        # cfg(unix)
        (
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-linux-androideabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:x86_64-linux-android",
        ): [
            "@raze__libc__0_2_126//:libc",
        ],
        "//conditions:default": [],
    }),
)


rust_binary(
    # Prefix bin name to disambiguate from (probable) collision with lib name
    # N.B.: The exact form of this is subject to change.
    name = "cargo_bin_x_to_y",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
    ],
    crate_root = "src/bin/x_to_y.rs",
    data = [],
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=x_to_y",
        "manual",
    ],
    version = "0.13.4",

    # buildifier: leave-alone
    deps = [
        ":duct",
        "@raze__once_cell__1_13_0//:once_cell",
        "@raze__os_pipe__0_9_2//:os_pipe",
        "@raze__shared_child__0_3_5//:shared_child",
    ] + selects.with_or({
        # cfg(unix)
        (
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-linux-androideabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:x86_64-linux-android",
        ): [
            "@raze__libc__0_2_126//:libc",
        ],
        "//conditions:default": [],
    }),
)


rust_library(
    name = "duct",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
    ],
    crate_root = "src/lib.rs",
    data = [],
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=duct",
        "manual",
    ],
    version = "0.13.4",

    # buildifier: leave-alone
    deps = [
        "@raze__once_cell__1_13_0//:once_cell",
        "@raze__os_pipe__0_9_2//:os_pipe",
        "@raze__shared_child__0_3_5//:shared_child",
    ] + selects.with_or({
        # cfg(unix)
        (
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-linux-androideabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:x86_64-linux-android",
        ): [
            "@raze__libc__0_2_126//:libc",
        ],
        "//conditions:default": [],
    }),
)

