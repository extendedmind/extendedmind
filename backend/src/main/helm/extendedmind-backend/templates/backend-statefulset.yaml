apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: backend
spec:
  replicas: {{ .Values.replicas | default 1 }}
  serviceName: backend
  template:
    metadata:
      annotations:
        pod.beta.kubernetes.io/init-containers: '[
            {
                "name": "backend-discovery",
                "image": "quay.io/extendedmind/backend-discovery:${project.version}",
                "args": ["/app/backend-conf", "/app/backend-data", "{{ .Values.operationMode }}"],
                "volumeMounts": [
                    {
                        "name": "confdir",
                        "mountPath": "/app/backend-conf"
                    },
                    {
                        "name": "datadir",
                        "mountPath": "/app/backend-data"
                    }
                ]
            }
{{ if and (.Values.restore) ( ne .Values.operationMode "HA" ) }}
            ,{
                "name": "backend-restore",
                "image": "quay.io/extendedmind/backend-restore:${project.version}",
                "args": ["{{ .Values.restore.file }}", "/app/backend-data", "{{ .Values.operationMode }}", "{{ .Values.copyPreCommand }}"],
                "volumeMounts": [
                    {
                        "name": "confdir",
                        "mountPath": "/app/backend-conf"
                    },
                    {
                        "name": "datadir",
                        "mountPath": "/app/backend-data"
                    }
  {{ if .Values.restore.hostPath }}
                    ,{
                        "name": "restoredir",
                        "mountPath": "/app/backend-restore-data"
                    }
  {{ end }}
                ]
            }
{{ end }}
        ]'
      labels:
        app: extendedmind
        tier: backend
        role: server
        project: backend
        version: ${project.version}
        group: org.extendedmind
    spec:
      containers:
        - name: backend
          image: quay.io/extendedmind/backend:${project.version}
          args:
            - "-Dextendedmind.neo4j.operationMode={{ .Values.operationMode }}"
            - "-Dextendedmind.neo4j.propertiesFile=/app/backend-conf/neo4j.properties"
{{ if .Values.init }}
            - "-Dextendedmind.commonCollectiveTitle=\"{{ .Values.init.commonCollectiveTitle }}\""
            - "-Dextendedmind.adminUserEmail={{ .Values.init.adminUserEmail }}"
            - "-Dextendedmind.adminUserPassword=\"{{ .Values.init.adminUserPassword }}\""
{{ end }}
            - "-cp"
            - "/app/backend/lib/*"
            - "org.extendedmind.Server"
          volumeMounts:
          - name: confdir
            mountPath: "/app/backend-conf"
          - name: datadir
            mountPath: "/app/backend-data"
          ports:
          - containerPort: 8081
            name: api
          - containerPort: 6362
            name: backup
          livenessProbe:
            httpGet:
              path: /v2/ha/available
              port: api
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
{{ if .Values.operationMode }}
  {{ if eq .Values.operationMode "HA" }}
          # NOTE: We need to wait for Kuberenetes issue #41015 to resolve for
          # this to work, because there is now way to properly update container state.
          readinessProbe:
            httpGet:
              path: /v2/ha/ready
              port: api
            initialDelaySeconds: 10
            timeoutSeconds: 5
  {{ end }}
{{ end }}
      volumes:
        - name: confdir
          emptyDir: {}
        - name: datadir
          persistentVolumeClaim:
            claimName: datadir
{{ if .Values.restore }}
  {{ if .Values.restore.hostPath }}
        - name: restoredir
          hostPath:
            path: {{ .Values.restore.hostPath }}
   {{ end }}
{{ end }}
  volumeClaimTemplates:
  - metadata:
      name: datadir
      annotations:
        volume.beta.kubernetes.io/storage-class: {{ .Values.storageClass }} 
      labels:
        project: backend
        version: ${project.version}
        group: org.extendedmind
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 100M
