<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.extendedmind</groupId>
    <artifactId>root</artifactId>
    <version>0.1-SNAPSHOT</version>
  </parent>
  <artifactId>e2e</artifactId>
  <packaging>jar</packaging>
  <name>Extended Mind :: End-to-end Tests </name>
  <description>Extended Mind End-to-end Tests</description>
  <url>https://github.com/extendedmind/extendedmind</url>
  <inceptionYear>2013</inceptionYear>

  <licenses>
    <license>
      <name>GNU Affero General Public License, Version 3</name>
      <url>http://www.gnu.org/licenses/agpl-3.0.html</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:git@github.com:extendedmind/extendedmind.git</connection>
    <developerConnection>scm:git:git@github.com:extendedmind/extendedmind.git</developerConnection>
    <url>git@github.com:extendedmind/extendedmind.git</url>
  </scm>

  <developers>
    <developer>
      <id>ttiurani</id>
      <name>Timo Tiuraniemi</name>
      <email>timo.tiuraniemi@iki.fi</email>
    </developer>
    <developer>
      <id>jpsalo</id>
      <name>JP Salo</name>
      <email>jukapeka@gmail.com</email>
    </developer>
    <developer>
      <id>il0</id>
      <name>Tuomas Saarela</name>
      <email>tuomas.saarela@iki.fi</email>
    </developer>
  </developers>

  <dependencies>

    <!-- Scala -->
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.extendedmind</groupId>
      <artifactId>backend</artifactId>
      <type>test-jar</type>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>org.extendedmind.frontend</groupId>
      <artifactId>frontend-core</artifactId>
      <type>war</type>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_${scala.version.short}</artifactId>
      <type>jar</type>
      <scope>test</scope>
    </dependency>

    <!-- Selenium dependency, use PhantomJS -->
    <dependency>
      <groupId>com.github.detro.ghostdriver</groupId>
      <artifactId>phantomjsdriver</artifactId>
      <version>1.0.4</version>
    </dependency>

    <dependency>
      <groupId>org.zeroturnaround</groupId>
      <artifactId>zt-zip</artifactId>
      <type>jar</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <type>jar</type>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <profiles>

    <!-- PhantomJS profiles, copied from here: https://github.com/qa/arquillian-phantom-binary -->
    <!-- NOTE: http://stackoverflow.com/a/12181394 this needs to be in all 
      projects that use PhantomJS as a dependency -->
    <profile>
      <id>linux-64-phantomjs</id>
      <activation>
        <os>
          <name>linux</name>
          <arch>amd64</arch>
        </os>
      </activation>
      <properties>
        <phantomjs.url>http://phantomjs.googlecode.com/files/phantomjs-${phantomjs.version}-linux-x86_64.tar.bz2</phantomjs.url>
        <phantomjs.binary.directory>${project.build.directory}/phantomjs-${phantomjs.version}-linux-x86_64</phantomjs.binary.directory>
        <platform.classifier>linux-64</platform.classifier>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <phase>generate-resources</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target name="download-phantomjs">
                    <get src="${phantomjs.url}" dest="target/phantomjs-linux-64.tar.bz2"
                      verbose="on" skipexisting="true" />
                    <bunzip2 src="target/phantomjs-linux-64.tar.bz2"
                      dest="target/phantomjs-linux-64.tar" />
                    <untar src="target/phantomjs-linux-64.tar"
                      dest="target" />
                    <chmod perm="a+x">
                      <fileset dir="${phantomjs.binary.directory}/bin">
                        <include name="phantomjs" />
                      </fileset>
                    </chmod>
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>macosx-phantomjs</id>
      <!-- Reference mac profile here: https://github.com/qa/arquillian-phantom-binary/blob/master/pom.xml -->
      <activation>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <properties>
        <target.os.family>macosx</target.os.family>
        <phantomjs.url>https://phantomjs.googlecode.com/files/phantomjs-${phantomjs.version}-macosx.zip</phantomjs.url>
        <phantomjs.binary.directory>${project.build.directory}/phantomjs-${phantomjs.version}-macosx</phantomjs.binary.directory>
        <platform.classifier>mac</platform.classifier>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <phase>generate-resources</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target name="download-phantomjs">
                    <get src="${phantomjs.url}" dest="target/phantomjs-macosx.zip"
                      verbose="on" skipexisting="true" />
                    <unzip src="target/phantomjs-macosx.zip" dest="target" />
                    <chmod perm="a+x">
                      <fileset dir="${phantomjs.binary.directory}/bin">
                        <include name="phantomjs" />
                      </fileset>
                    </chmod>
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>
    <sourceDirectory>src/main/scala</sourceDirectory>
    <testSourceDirectory>src/test/scala</testSourceDirectory>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.extendedmind</groupId>
                  <artifactId>backend</artifactId>
                  <type>test-jar</type>
                  <overWrite>true</overWrite>
                  <outputDirectory>${project.build.directory}</outputDirectory>
                  <includes>*.zip, testData.properties</includes>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
          <execution>
            <id>copy</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.extendedmind.frontend</groupId>
                  <artifactId>frontend-core</artifactId>
                  <type>war</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>${project.build.directory}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>org.extendedmind</groupId>
                  <artifactId>backend</artifactId>
                  <type>jar</type>
                  <classifier>jar-with-dependencies</classifier>
                  <overWrite>true</overWrite>
                  <outputDirectory>${project.build.directory}</outputDirectory>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <fileset>
              <directory>${basedir}</directory>
              <includes>
                <include>phantomjsdriver.log</include>
              </includes>
            </fileset>
            <fileset>
              <directory>${basedir}/logs</directory>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
      </plugin>
      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.scalatest</groupId>
        <artifactId>scalatest-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>test</id>
            <phase>integration-test</phase>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-maven-plugin</artifactId>
        <version>${jetty.version}</version>
        <executions>
          <execution>
            <id>deploy-war</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>deploy-war</goal>
            </goals>
            <configuration>
              <daemon>true</daemon>
              <reload>manual</reload>
            </configuration>
          </execution>
          <execution>
            <id>stop-jetty</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <stopKey>testKey</stopKey>
          <stopPort>9999</stopPort>
          <war>${project.build.directory}/frontend-core-${project.version}.war</war>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-http</artifactId>
            <version>${jetty.version}</version>
            <type>jar</type>
            <scope>runtime</scope>
          </dependency>
          <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-rewrite</artifactId>
            <version>${jetty.version}</version>
            <type>jar</type>
            <scope>runtime</scope>
          </dependency>
        </dependencies>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.2.1.jbossorg-3</version>
        <executions>
          <execution>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <executable>java</executable>
          <arguments>
            <argument>-jar</argument>
            <argument>target/backend-${project.version}-jar-with-dependencies.jar</argument>
          </arguments>
          <background>true</background>
          <!-- Poll for backend server to be up and running -->
          <backgroundPollingAddress>127.0.0.1:8081</backgroundPollingAddress>
        </configuration>
      </plugin>
    </plugins>
    <pluginManagement>
      <plugins>
        <!--This plugin's configuration is used to store Eclipse m2e settings 
          only. It has no influence on the Maven build itself. -->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <versionRange>[2.8,)</versionRange>
                    <goals>
                      <goal>unpack</goal>
                      <goal>copy</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore></ignore>
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>
                      org.apache.maven.plugins
                    </groupId>
                    <artifactId>
                      maven-antrun-plugin
                    </artifactId>
                    <versionRange>[1.7,)</versionRange>
                    <goals>
                      <goal>run</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore></ignore>
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-maven-plugin</artifactId>
                    <versionRange>[9,)</versionRange>
                    <goals>
                      <goal>start</goal>
                      <goal>deploy-war</goal>
                      <goal>stop</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore></ignore>
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

</project>
